<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.Unity.Configuration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> that adds 
            an extension to the container. The command takes the extension type, and news
            up an instance of the extension at configuration time.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand">
            <summary>
            Interface for objects that will execute methods
            on the given container. Typically used for configuration
            of the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand.#ctor(System.Type)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand"/> which
            will add an extension of the type <paramref name="extensionType"/> to a container.
            </summary>
            <param name="extensionType">Type of the extension to add. This type must inherit
            from <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/></param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter">
            <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that converts types
            to and from fully qualified type names.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether the conversion is allowed.
            </summary>
            
            <returns>
            true if the conversion is allowed; otherwise, false. 
            </returns>
            
            <param name="type">The type to convert to.</param>
            <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> object used for type conversion.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether the conversion is allowed.
            </summary>
            
            <returns>
            true if the conversion is allowed; otherwise, false.
            </returns>
            
            <param name="type">The <see cref="T:System.Type"></see> to convert from.</param>
            <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> object used for type conversions.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> that composites other 
            <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> and runs them in order
            when executed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> with no contained
            command objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> that contains
            the given sequence of commands.
            </summary>
            <param name="commands"><see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> objects to add
            to this collection.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor(Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> that contains
            the given set of commands.
            </summary>
            <param name="commands">The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> to add to the collection.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply each of the <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> objects stored
            in this collection to the given <paramref name="container"/>.
            </summary>
            <param name="container">The container to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.LifetimeStyle">
            <summary>
            The valid values to use for the configuration file's lifetime attribute.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.Configuration.LifetimeStyle.Transient">
            <summary>
            Create a new object every time (this is the default)
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.Configuration.LifetimeStyle.Singleton">
            <summary>
            Return the same instance every time
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ConversionNotSupported">
            <summary>
              Looks up a localized string similar to Can only convert to and from strings, not type {0}.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that calls the
            <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping as a default mapping.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping with the given name.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
            <param name="name">Name to use when registering.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping with the given name and <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
            <param name="name">Name to use when registering.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply this registration to the given container.
            </summary>
            <param name="container"><see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand">
            <summary>
            A configuration command object that will register a pre-existing
            instance with the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.#ctor(System.Type,System.Object,System.Boolean)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand"/> that, when executed
            will install the given instance into the container as a default value.
            </summary>
            <param name="instanceType">Type to use when registering the instance.</param>
            <param name="instance">Instance to put into the container.</param>
            <param name="containerControlsLifetime">bool value to pass to the RegisterInstance call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.#ctor(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand"/> that, when executed
            will install the given instance into the container with the given name.
            </summary>
            <param name="instanceType">Type to use when registering the instance.</param>
            <param name="name">Name to register the instance with.</param>
            <param name="instance">Instance to put into the container.</param>
            <param name="containerControlsLifetime">bool value to pass to the RegisterInstance call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> that contains the configuration
            for one or more <see cref="T:Microsoft.Practices.Unity.UnityContainer"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Containers">
            <summary>
            Provides access to the container information in the section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that stores the configuration information
            for a single <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElement.GetConfigCommand">
            <summary>
            Retrieve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that, when
            executed, will apply this object's configuration settings to the give container.
            </summary>
            <returns>The command object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Name">
            <summary>
            Name of this container configuration. The config may be retrieved by name.
            </summary>
            <remarks>This name is only used for lookup from the config file. If not 
            specified, this is the default container configuration.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Types">
            <summary>
            The collection of &lt;type&gt; elements that contain the actual configuration entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Extensions">
            <summary>
            The collection of &lt;extension&gt; elements that specify which extensions to add to the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Instances">
            <summary>
            The collection of &lt;instance&gt; element that specify which instances to add to the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.ExtensionConfig">
            <summary>
            The collection of extension configuration elements that are used to add
            arbitrary new extensions to the configuration file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement">
            <summary>
            This class provides a base class for configuration
            of a Unity container using user-installed container
            extensions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.DeserializeElement(System.Xml.XmlReader)">
            <summary>
            Read in the contents of this element from the <paramref name="reader"/>.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing contents of element.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.GetConfigurationCommand">
            <summary>
            Return an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> instance that, when
            executed, will configure a container with this element's state.
            </summary>
            <returns>The command object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Name">
            <summary>
            Name of this configuration element. Names must be unique.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Type">
            <summary>
            Concrete type name for this configuration element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection">
            <summary>
            Collection of <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement"/> elements
            from the configuration file. This collection can contain derived classes of
            <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
             Figure out the concrete type to create given the type attribute on the given
             xml reader. If not present, throws an exception.
            </summary>
            
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            
            <param name="reader">An input stream that reads XML from the configuration file. </param>
            <param name="elementName">The name of the unrecognized element. </param>
            <exception cref="T:System.ArgumentException">elementName starts with the reserved prefix "config" or "lock".</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in elementName is the &lt;clear&gt; element.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.Item(System.String)">
            <summary>
            Resolve the given element by key.
            </summary>
            <param name="key">Name of element to find.</param>
            <returns>Element at the given key.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that holds the information from
            the configuration file about which extensions to add to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.Type">
            <summary>
            The type of extension to add to the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that holds the collection of
            extension elements specified in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.GetConfigCommand">
            <summary>
            Get an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.Item(System.Int32)">
            <summary>
            Resolve or set the extension element stored at the given index.
            </summary>
            <param name="index">Index to get or set the element at.</param>
            <returns>The extension element.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that holds the collection of
            container elements specified in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Item(System.String)">
            <summary>
            Resolve a <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement"/> by name.
            </summary>
            <param name="name">name to look up.</param>
            <returns>The element.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Item(System.Int32)">
            <summary>
            Get or set a <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement"/> by index.
            </summary>
            <param name="index">Index to get or set at.</param>
            <returns>The element.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Default">
            <summary>
            Get the default (unnamed) container element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that holds the information
            about instances to be placed in the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Name">
            <summary>
            Name to use when registering this instance. Optional.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Type">
            <summary>
            Type of this instance. Defaults to "string"
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Value">
            <summary>
            Value to use to initialize the instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.TypeConverter">
            <summary>
            The type converter to use to convert the Value into the instance.
            If not specified, we use the default converter for the type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that stores the
            collection of <see cref="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElement"/> objects specified
            in the current configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityTypeElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> class used to manage the contents
            of a &lt;type&gt; node in the configuration file.
            </summary>
            <remarks>
            Using the Type element in configuration can result in both type mappings
            and singletons being registered. If a name is specified, it is used
            for both the type mapping and singleton setting.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Name">
            <summary>
            Name to use when registering this type. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Type">
            <summary>
            Source type to configure in the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.MapTo">
            <summary>
            Destination type for type mapping.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Lifetime">
            <summary>
            Sets the lifetime for the given type and name. Transient means 
            to create a new instance every type and is the default.
            Singleton means to return the same instance on every request.
            </summary>
            <remarks>
            When configuring a singleton, if both the type and mapTo attributes
            are specified, the SetSingleton call will be done on the type
            specified in the mapTo attribute. Otherwise it'll be done on the
            type specified in the Type attribute.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that stores the set of
            type elements in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.Item(System.String)">
            <summary>
            Resolve access to a type element by name
            </summary>
            <param name="name">Name to look up by. This is not just the name element, it's of the form
            &lt;name&gt;:&lt;fully qualified type name&gt;.</param>
            <returns>The given element, or null if not in the collection.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.Item(System.Int32)">
            <summary>
            Gets access to a type element to look up.
            </summary>
            <param name="index">The index to retrieve the element from.</param>
            <returns>The element.</returns>
        </member>
    </members>
</doc>
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.Unity.Configuration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> that adds 
            an extension to the container. The command takes the extension type, and news
            up an instance of the extension at configuration time.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand">
            <summary>
            Interface for objects that will execute methods
            on the given container. Typically used for configuration
            of the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand.#ctor(System.Type)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand"/> which
            will add an extension of the type <paramref name="extensionType"/> to a container.
            </summary>
            <param name="extensionType">Type of the extension to add. This type must inherit
            from <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/></param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter">
            <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that converts types
            to and from fully qualified type names.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether the conversion is allowed.
            </summary>
            
            <returns>
            true if the conversion is allowed; otherwise, false. 
            </returns>
            
            <param name="type">The type to convert to.</param>
            <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> object used for type conversion.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether the conversion is allowed.
            </summary>
            
            <returns>
            true if the conversion is allowed; otherwise, false.
            </returns>
            
            <param name="type">The <see cref="T:System.Type"></see> to convert from.</param>
            <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> object used for type conversions.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> that composites other 
            <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> and runs them in order
            when executed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> with no contained
            command objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> that contains
            the given sequence of commands.
            </summary>
            <param name="commands"><see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> objects to add
            to this collection.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor(Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> that contains
            the given set of commands.
            </summary>
            <param name="commands">The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> to add to the collection.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply each of the <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> objects stored
            in this collection to the given <paramref name="container"/>.
            </summary>
            <param name="container">The container to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.LifetimeStyle">
            <summary>
            The valid values to use for the configuration file's lifetime attribute.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.Configuration.LifetimeStyle.Transient">
            <summary>
            Create a new object every time (this is the default)
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.Configuration.LifetimeStyle.Singleton">
            <summary>
            Return the same instance every time
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ConversionNotSupported">
            <summary>
              Looks up a localized string similar to Can only convert to and from strings, not type {0}.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that calls the
            <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping as a default mapping.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping with the given name.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
            <param name="name">Name to use when registering.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping with the given name and <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
            <param name="name">Name to use when registering.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply this registration to the given container.
            </summary>
            <param name="container"><see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand">
            <summary>
            A configuration command object that will register a pre-existing
            instance with the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.#ctor(System.Type,System.Object,System.Boolean)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand"/> that, when executed
            will install the given instance into the container as a default value.
            </summary>
            <param name="instanceType">Type to use when registering the instance.</param>
            <param name="instance">Instance to put into the container.</param>
            <param name="containerControlsLifetime">bool value to pass to the RegisterInstance call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.#ctor(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand"/> that, when executed
            will install the given instance into the container with the given name.
            </summary>
            <param name="instanceType">Type to use when registering the instance.</param>
            <param name="name">Name to register the instance with.</param>
            <param name="instance">Instance to put into the container.</param>
            <param name="containerControlsLifetime">bool value to pass to the RegisterInstance call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> that contains the configuration
            for one or more <see cref="T:Microsoft.Practices.Unity.UnityContainer"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Containers">
            <summary>
            Provides access to the container information in the section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that stores the configuration information
            for a single <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElement.GetConfigCommand">
            <summary>
            Retrieve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that, when
            executed, will apply this object's configuration settings to the give container.
            </summary>
            <returns>The command object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Name">
            <summary>
            Name of this container configuration. The config may be retrieved by name.
            </summary>
            <remarks>This name is only used for lookup from the config file. If not 
            specified, this is the default container configuration.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Types">
            <summary>
            The collection of &lt;type&gt; elements that contain the actual configuration entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Extensions">
            <summary>
            The collection of &lt;extension&gt; elements that specify which extensions to add to the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Instances">
            <summary>
            The collection of &lt;instance&gt; element that specify which instances to add to the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.ExtensionConfig">
            <summary>
            The collection of extension configuration elements that are used to add
            arbitrary new extensions to the configuration file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement">
            <summary>
            This class provides a base class for configuration
            of a Unity container using user-installed container
            extensions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.DeserializeElement(System.Xml.XmlReader)">
            <summary>
            Read in the contents of this element from the <paramref name="reader"/>.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing contents of element.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.GetConfigurationCommand">
            <summary>
            Return an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> instance that, when
            executed, will configure a container with this element's state.
            </summary>
            <returns>The command object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Name">
            <summary>
            Name of this configuration element. Names must be unique.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Type">
            <summary>
            Concrete type name for this configuration element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection">
            <summary>
            Collection of <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement"/> elements
            from the configuration file. This collection can contain derived classes of
            <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
             Figure out the concrete type to create given the type attribute on the given
             xml reader. If not present, throws an exception.
            </summary>
            
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            
            <param name="reader">An input stream that reads XML from the configuration file. </param>
            <param name="elementName">The name of the unrecognized element. </param>
            <exception cref="T:System.ArgumentException">elementName starts with the reserved prefix "config" or "lock".</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in elementName is the &lt;clear&gt; element.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.Item(System.String)">
            <summary>
            Resolve the given element by key.
            </summary>
            <param name="key">Name of element to find.</param>
            <returns>Element at the given key.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that holds the information from
            the configuration file about which extensions to add to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.Type">
            <summary>
            The type of extension to add to the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that holds the collection of
            extension elements specified in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.GetConfigCommand">
            <summary>
            Get an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.Item(System.Int32)">
            <summary>
            Resolve or set the extension element stored at the given index.
            </summary>
            <param name="index">Index to get or set the element at.</param>
            <returns>The extension element.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that holds the collection of
            container elements specified in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Item(System.String)">
            <summary>
            Resolve a <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement"/> by name.
            </summary>
            <param name="name">name to look up.</param>
            <returns>The element.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Item(System.Int32)">
            <summary>
            Get or set a <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement"/> by index.
            </summary>
            <param name="index">Index to get or set at.</param>
            <returns>The element.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Default">
            <summary>
            Get the default (unnamed) container element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that holds the information
            about instances to be placed in the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Name">
            <summary>
            Name to use when registering this instance. Optional.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Type">
            <summary>
            Type of this instance. Defaults to "string"
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Value">
            <summary>
            Value to use to initialize the instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.TypeConverter">
            <summary>
            The type converter to use to convert the Value into the instance.
            If not specified, we use the default converter for the type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that stores the
            collection of <see cref="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElement"/> objects specified
            in the current configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityTypeElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> class used to manage the contents
            of a &lt;type&gt; node in the configuration file.
            </summary>
            <remarks>
            Using the Type element in configuration can result in both type mappings
            and singletons being registered. If a name is specified, it is used
            for both the type mapping and singleton setting.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Name">
            <summary>
            Name to use when registering this type. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Type">
            <summary>
            Source type to configure in the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.MapTo">
            <summary>
            Destination type for type mapping.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Lifetime">
            <summary>
            Sets the lifetime for the given type and name. Transient means 
            to create a new instance every type and is the default.
            Singleton means to return the same instance on every request.
            </summary>
            <remarks>
            When configuring a singleton, if both the type and mapTo attributes
            are specified, the SetSingleton call will be done on the type
            specified in the mapTo attribute. Otherwise it'll be done on the
            type specified in the Type attribute.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that stores the set of
            type elements in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.Item(System.String)">
            <summary>
            Resolve access to a type element by name
            </summary>
            <param name="name">Name to look up by. This is not just the name element, it's of the form
            &lt;name&gt;:&lt;fully qualified type name&gt;.</param>
            <returns>The given element, or null if not in the collection.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.Item(System.Int32)">
            <summary>
            Gets access to a type element to look up.
            </summary>
            <param name="index">The index to retrieve the element from.</param>
            <returns>The element.</returns>
        </member>
    </members>
</doc>
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.Unity.Configuration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> that adds 
            an extension to the container. The command takes the extension type, and news
            up an instance of the extension at configuration time.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand">
            <summary>
            Interface for objects that will execute methods
            on the given container. Typically used for configuration
            of the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand.#ctor(System.Type)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand"/> which
            will add an extension of the type <paramref name="extensionType"/> to a container.
            </summary>
            <param name="extensionType">Type of the extension to add. This type must inherit
            from <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/></param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AddExtensionContainerConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter">
            <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that converts types
            to and from fully qualified type names.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether the conversion is allowed.
            </summary>
            
            <returns>
            true if the conversion is allowed; otherwise, false. 
            </returns>
            
            <param name="type">The type to convert to.</param>
            <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> object used for type conversion.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether the conversion is allowed.
            </summary>
            
            <returns>
            true if the conversion is allowed; otherwise, false.
            </returns>
            
            <param name="type">The <see cref="T:System.Type"></see> to convert from.</param>
            <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> object used for type conversions.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyQualifiedTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed. </param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> that composites other 
            <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> and runs them in order
            when executed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> with no contained
            command objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> that contains
            the given sequence of commands.
            </summary>
            <param name="commands"><see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> objects to add
            to this collection.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.#ctor(Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection"/> that contains
            the given set of commands.
            </summary>
            <param name="commands">The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> to add to the collection.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfigurationCommandCollection.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply each of the <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> objects stored
            in this collection to the given <paramref name="container"/>.
            </summary>
            <param name="container">The container to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.LifetimeStyle">
            <summary>
            The valid values to use for the configuration file's lifetime attribute.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.Configuration.LifetimeStyle.Transient">
            <summary>
            Create a new object every time (this is the default)
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.Configuration.LifetimeStyle.Singleton">
            <summary>
            Return the same instance every time
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ConversionNotSupported">
            <summary>
              Looks up a localized string similar to Can only convert to and from strings, not type {0}.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that calls the
            <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping as a default mapping.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping with the given name.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
            <param name="name">Name to use when registering.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.#ctor(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand"/> that registers
            the given type mapping with the given name and <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="from">The type to map from.</param>
            <param name="to">The type to map to.</param>
            <param name="name">Name to use when registering.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply this registration to the given container.
            </summary>
            <param name="container"><see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand">
            <summary>
            A configuration command object that will register a pre-existing
            instance with the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.#ctor(System.Type,System.Object,System.Boolean)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand"/> that, when executed
            will install the given instance into the container as a default value.
            </summary>
            <param name="instanceType">Type to use when registering the instance.</param>
            <param name="instance">Instance to put into the container.</param>
            <param name="containerControlsLifetime">bool value to pass to the RegisterInstance call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.#ctor(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand"/> that, when executed
            will install the given instance into the container with the given name.
            </summary>
            <param name="instanceType">Type to use when registering the instance.</param>
            <param name="name">Name to register the instance with.</param>
            <param name="instance">Instance to put into the container.</param>
            <param name="containerControlsLifetime">bool value to pass to the RegisterInstance call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterInstanceConfigurationCommand.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> that contains the configuration
            for one or more <see cref="T:Microsoft.Practices.Unity.UnityContainer"/>s.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Containers">
            <summary>
            Provides access to the container information in the section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that stores the configuration information
            for a single <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElement.GetConfigCommand">
            <summary>
            Retrieve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that, when
            executed, will apply this object's configuration settings to the give container.
            </summary>
            <returns>The command object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Name">
            <summary>
            Name of this container configuration. The config may be retrieved by name.
            </summary>
            <remarks>This name is only used for lookup from the config file. If not 
            specified, this is the default container configuration.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Types">
            <summary>
            The collection of &lt;type&gt; elements that contain the actual configuration entries.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Extensions">
            <summary>
            The collection of &lt;extension&gt; elements that specify which extensions to add to the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.Instances">
            <summary>
            The collection of &lt;instance&gt; element that specify which instances to add to the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElement.ExtensionConfig">
            <summary>
            The collection of extension configuration elements that are used to add
            arbitrary new extensions to the configuration file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement">
            <summary>
            This class provides a base class for configuration
            of a Unity container using user-installed container
            extensions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.DeserializeElement(System.Xml.XmlReader)">
            <summary>
            Read in the contents of this element from the <paramref name="reader"/>.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing contents of element.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.GetConfigurationCommand">
            <summary>
            Return an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> instance that, when
            executed, will configure a container with this element's state.
            </summary>
            <returns>The command object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Name">
            <summary>
            Name of this configuration element. Names must be unique.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement.Type">
            <summary>
            Concrete type name for this configuration element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection">
            <summary>
            Collection of <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement"/> elements
            from the configuration file. This collection can contain derived classes of
            <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
             Figure out the concrete type to create given the type attribute on the given
             xml reader. If not present, throws an exception.
            </summary>
            
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            
            <param name="reader">An input stream that reads XML from the configuration file. </param>
            <param name="elementName">The name of the unrecognized element. </param>
            <exception cref="T:System.ArgumentException">elementName starts with the reserved prefix "config" or "lock".</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in elementName is the &lt;clear&gt; element.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionConfigurationElementCollection.Item(System.String)">
            <summary>
            Resolve the given element by key.
            </summary>
            <param name="key">Name of element to find.</param>
            <returns>Element at the given key.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that holds the information from
            the configuration file about which extensions to add to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElement.Type">
            <summary>
            The type of extension to add to the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that holds the collection of
            extension elements specified in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.GetConfigCommand">
            <summary>
            Get an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerExtensionElementCollection.Item(System.Int32)">
            <summary>
            Resolve or set the extension element stored at the given index.
            </summary>
            <param name="index">Index to get or set the element at.</param>
            <returns>The extension element.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that holds the collection of
            container elements specified in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Item(System.String)">
            <summary>
            Resolve a <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement"/> by name.
            </summary>
            <param name="name">name to look up.</param>
            <returns>The element.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Item(System.Int32)">
            <summary>
            Get or set a <see cref="T:Microsoft.Practices.Unity.Configuration.UnityContainerElement"/> by index.
            </summary>
            <param name="index">Index to get or set at.</param>
            <returns>The element.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityContainerElementCollection.Default">
            <summary>
            Get the default (unnamed) container element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that holds the information
            about instances to be placed in the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Name">
            <summary>
            Name to use when registering this instance. Optional.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Type">
            <summary>
            Type of this instance. Defaults to "string"
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.Value">
            <summary>
            Value to use to initialize the instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityInstanceElement.TypeConverter">
            <summary>
            The type converter to use to convert the Value into the instance.
            If not specified, we use the default converter for the type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that stores the
            collection of <see cref="T:Microsoft.Practices.Unity.Configuration.UnityInstanceElement"/> objects specified
            in the current configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityInstanceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityTypeElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> class used to manage the contents
            of a &lt;type&gt; node in the configuration file.
            </summary>
            <remarks>
            Using the Type element in configuration can result in both type mappings
            and singletons being registered. If a name is specified, it is used
            for both the type mapping and singleton setting.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElement.GetConfigCommand">
            <summary>
            Resolve an <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/> object that will
            apply the configuration specified by this config element to the given
            container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Unity.Configuration.IContainerConfigurationCommand"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Execute this command against the given container.
            </summary>
            <remarks>
            Interface implementors will implement this method to
            apply configuration changes to the container.</remarks>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Name">
            <summary>
            Name to use when registering this type. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Type">
            <summary>
            Source type to configure in the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.MapTo">
            <summary>
            Destination type for type mapping.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElement.Lifetime">
            <summary>
            Sets the lifetime for the given type and name. Transient means 
            to create a new instance every type and is the default.
            Singleton means to return the same instance on every request.
            </summary>
            <remarks>
            When configuring a singleton, if both the type and mapTo attributes
            are specified, the SetSingleton call will be done on the type
            specified in the mapTo attribute. Otherwise it'll be done on the
            type specified in the Type attribute.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> that stores the set of
            type elements in the config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
            
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for. </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.Item(System.String)">
            <summary>
            Resolve access to a type element by name
            </summary>
            <param name="name">Name to look up by. This is not just the name element, it's of the form
            &lt;name&gt;:&lt;fully qualified type name&gt;.</param>
            <returns>The given element, or null if not in the collection.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityTypeElementCollection.Item(System.Int32)">
            <summary>
            Gets access to a type element to look up.
            </summary>
            <param name="index">The index to retrieve the element from.</param>
            <returns>The element.</returns>
        </member>
    </members>
</doc>
