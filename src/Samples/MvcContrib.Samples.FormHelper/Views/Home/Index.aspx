<%@ Page Language="C#" MasterPageFile="~/Shared/Layout.master" Inherits="System.Web.Mvc.ViewPage" %>
<%@ Import Namespace="MvcContrib.Samples.FormHelper.Models" %>
<asp:Content ContentPlaceHolderID="head" runat="server">
	<%= Html.Form().ValidatorRegistrationScripts() %>
</asp:Content>
<asp:Content ContentPlaceHolderID="body" runat="server">
	<p>
		FormHelper currently supports generating the following HTML elements:
		<ul>
			<li>Text fields</li>
			<li>Text areas</li>
			<li>Hidden fields</li>
			<li>Checkbox fields</li>
			<li>Dropdown lists &amp; listboxes</li>
			<li>Radio fields</li>
			<li>Checkbox Lists</li>
			<li>Radio Lists</li>
			<li>Submit buttons</li>		
			<li>Form tags</li>	
			<li>Validators</li>
		</ul>
		<p>
			Most of the helpers have three overloads - the simplest takes the element's name. The second can take an IDictionary of HTML attributes and the third takes a strongly typed object for the HTML attributes.
		</p>
	</p>
	
	<h1>Text Fields</h1>
	<p>
		The name given to the text box is used for databinding. This example automatically extracts the "Name" property from the "person" object in the ViewData:<br />
		<%= Html.Form().TextField("person.Name") %><br /><br />
		HTML attributes can be specified using a dictionary or a strongly typed object:<br />
		Using a dictionary: <%= Html.Form().TextField("person.Name", new Hash(@class => "demo1")) %><br />
		Using strongly typed options: <%= Html.Form().TextField(new MvcContrib.UI.Tags.TextBox { Name = "person.Name", Class = "demo1" }) %>
		<br />
		<p>The same applies to text areas:</p>
		<%= Html.Form().TextArea("person.Name", new Hash(rows => 10, cols => 40)) %>
	</p>
	<h1>Hidden fields</h1>
	<p>Hidden fields can be created using a similar syntax (view source to see generated HTML):</p>
	<%= Html.Form().HiddenField("person.Id") %>
	<h1>Checkbox fields</h1>
	<p>Note that for checkbox fields, a hidden field is also generated with the same name to allow for easier databinding.</p>
	<p>Is user a developer? <%= Html.Form().CheckBoxField("person.IsDeveloper") %></p>
	<h1>Radio Buttons</h1>
	<p>
		Radio buttons can be created using a similar syntax to checkboxes. With radio buttons, the value must be specified as the second parameter:<br /><br />
		<%= Html.Form().RadioField("person.IsDeveloper", true, new Hash(label => "User is a developer")) %><br />
		<%= Html.Form().RadioField("person.IsDeveloper", false, new Hash(label => "User is not a developer")) %>
		
	</p>	
	
	<h1>Dropdown (select)</h1>
	<p>
		A dropdown takes an enumerable object as its DataSource parameter. The TextField and ValueField properties are used for databinding: <br />
		<%= Html.Form().Select("person.RoleId", ViewData["roles"], "Name", "Id", new Hash(firstOption => "Please select...")) %>
	</p>
	<p>The options can also be strongly typed.</p>
	<p>It is also possible to use an Enum as the datasource for a Select by using a generic overload:</p>	
	<p>
		<%= Html.Form().Select<Gender>("person.Gender") %>
	</p>
	
	<h1>Listbox (select)</h1>
	<p>
		A listbox can also be created using the Select method by setting the 'Size' property to a value greater than 1. Multiple selected values are also supported.<br />
		<%= Html.Form().Select("listbox1", ViewData["roles"], "Name", "Id", new Hash(size => 5, multiple => true, selectedValue => new[] { 1, 2 } )) %>
	</p>
	
	<h1>Checkbox Lists and Radio Lists</h1>
	<p>Checkbox lists and radio lists can be generated in one of three ways. The standard method outputs a horizontal list:</p>
	<%= Html.Form().CheckBoxList("accessLevel", ViewData["roles"], "Name", "Id") %>
	<p>You can use the ToFormattedString method to create a vertical list:</p>
	<%= Html.Form().CheckBoxList("accessLevel2", ViewData["roles"], "Name", "Id").ToFormattedString("{0}<br />") %>
	<p>You can also iterate over the checkbox list to manually manipulate each checkbox/radio button</p>
	<% foreach(var checkbox in Html.Form().CheckBoxList("accessLevel3", ViewData["roles"], "Name", "Id")) { %>
		<% if(checkbox.Value.Equals("2")) { checkbox.Checked = true; }%>	
		<%= checkbox %>
	<% } %>	
	
	<h1>Form Tags</h1>
	<p>Form tags can be generated by calling <b>Form.For</b>. Note: this syntax is currently only available when using C# in conjunction with the WebForms view engine.</p>
	<% Html.Form().For<Person>((Person)ViewData["person"], "/home/index", form => { %>
		<% form.Attributes.Add("class", "foo"); %>
		Name: <%= form.TextField("Name") %><br />
		Is Developer?: <%= form.CheckBoxField("IsDeveloper") %><br /><br />
		<%= form.Submit() %>
	<%}); %>
	
	<h1>Validators</h1>
	<p>Validators utilize the ASP.NET client site validation scripts. It requires that you call <b>Form.ValidatorRegistrationScripts</b> within the head element, 
		<b>Form.ValidatorInitializationScripts</b> at the end of your body element, and when creating your form call <b>Form.FormValidation</b> as the htmlAttributes parameter. 
		You can also specify the different validation groups when creating your form validation and validators. You'll notice this was done below to separate the examples.</p>
		
	<% using (Html.Form("Home", "Index", FormMethod.Post, Html.Form().FormValidation("required"))) { %>
		<p>You can use a <b>Required Validator:</b> (click the Validate button)</p>
		Name: <%= Html.TextBox("nameForRequired") %>
		<%= Html.Form().RequiredValidator("nameForRequiredValidator", "nameForRequired", "You must supply a name.", "required") %>
		<br />
		<%= Html.SubmitButton("submitRequired", "Validate") %>
	<% } %>
	
	<% using (Html.Form("Home", "Index", FormMethod.Post, Html.Form().FormValidation("regex"))) { %>
		<p>You can use a <b>Regular Expression Validator:</b> (type any non alpha character)</p>
		Name: <%= Html.TextBox("nameForRegex") %>
		<%= Html.Form().RegularExpressionValidator("nameForRegexValidator", "nameForRegex", "[a-zA-Z]*", "The name can only contain alpha characters.", "regex") %>
		<br />
		<%= Html.SubmitButton("submitRegex", "Validate") %>
	<% } %>
	
	<% using (Html.Form("Home", "Index", FormMethod.Post, Html.Form().FormValidation("range"))) { %>
		<p>You can use a <b>Range Validator:</b> (type a number less than 18 or greater than 35)</p>
		Age: <%= Html.TextBox("ageForRange") %>
		<%= Html.Form().RangeValidator("ageForRangeValidator", "ageForRange", "18", "35", ValidationDataType.Integer, "You do not meet the target age range of 18-35.", "range") %>
		<br />
		<%= Html.SubmitButton("submitRange", "Validate") %>
	<% } %>
	
	<% using (Html.Form("Home", "Index", FormMethod.Post, Html.Form().FormValidation("compare"))) { %>
		<p>You can use a <b>Compare Validator:</b> (type the same text in each)</p>
		First: <%= Html.TextBox("firstCompare") %>
		Second: <%= Html.TextBox("secondCompare") %>
		<%= Html.Form().CompareValidator("compareValidator", "firstCompare", "secondCompare", ValidationDataType.String, ValidationCompareOperator.NotEqual, "You cannot specify the same text for each.", "compare") %>
		<br />
		<%= Html.SubmitButton("submitCompare", "Validate") %>
	<% } %>
	
	<% using (Html.Form("Home", "Index", FormMethod.Post, Html.Form().FormValidation("custom"))) { %>
		<p>You can use a <b>Custom Validator:</b> (type anything but 'mvc')</p>
		<script type="text/javascript">
			function ValidateTextEquals(source, args) { 
				args.IsValid = (args.Value == 'mvc');
			}
		</script>
		Text: <%= Html.TextBox("textCustom") %>
		<%= Html.Form().CustomValidator("textCustomValidator", "textCustom", "ValidateTextEquals", "The text must equal 'mvc'.", "custom") %>
		<br />
		<%= Html.SubmitButton("submitCustom", "Validate") %>
	<% } %>
	
	<%= Html.Form().ValidatorInitializationScripts() %>
</asp:Content>
