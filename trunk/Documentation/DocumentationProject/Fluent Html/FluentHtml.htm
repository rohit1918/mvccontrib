<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 12 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:12.0pt;
	font-family:"Verdana","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:7.5pt;
	margin-right:0in;
	margin-left:0in;
	line-height:normal;
	font-size:14.5pt;
	font-family:"Tahoma","sans-serif";
	font-weight:normal;}
a:link, span.MsoHyperlink
	{color:#6699CC;
	text-decoration:none none;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	line-height:15.6pt;
	font-size:12.0pt;
	font-family:"Verdana","sans-serif";}
pre
	{mso-style-link:"HTML Preformatted Char";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:normal;
	font-size:10.0pt;
	font-family:"Courier New";}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:normal;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Tahoma","sans-serif";}
span.asp2
	{mso-style-name:asp2;
	background:yellow;}
span.kwrd2
	{mso-style-name:kwrd2;
	color:blue;}
span.str2
	{mso-style-name:str2;
	color:#006080;}
span.html2
	{mso-style-name:html2;
	color:maroon;}
span.attr2
	{mso-style-name:attr2;
	color:red;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.rem2
	{mso-style-name:rem2;
	color:green;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.HTMLPreformattedChar
	{mso-style-name:"HTML Preformatted Char";
	mso-style-link:"HTML Preformatted";
	font-family:"Courier New";}
span.msoDel
	{mso-style-name:"";
	text-decoration:line-through;
	color:red;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link="#6699CC" vlink=purple>

<div class=Section1>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><b><span lang=EN style='font-size:19.0pt;font-family:"Tahoma","sans-serif";
color:#333333'><a
href="http://lunaverse.wordpress.com/2008/11/24/mvcfluenthtml-fluent-html-interface-for-ms-mvc/">MvcFluentHtml
- Fluent HTML Interface For MS&nbsp;MVC</a></span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span lang=EN style='font-size:9.0pt;color:#CCCCCC'>Filed under: <a
href="http://en.wordpress.com/tag/c/" title="View all posts in C#"><span
style='color:#CCCCCC'>C#</span></a> — Tags: <a
href="http://en.wordpress.com/tag/html/"><span style='color:#CCCCCC'>HTML</span></a>,
<a href="http://en.wordpress.com/tag/ms-mvc/"><span style='color:#CCCCCC'>MS
MVC</span></a> — Tim Scott @ 6:45 pm </span></p>

<p class=MsoNormal style='line-height:15.6pt'><b><span lang=EN
style='font-size:9.0pt;color:#333333'>UPDATE: MvcFluentHtml has been moved to <a
href="http://www.codeplex.com/MVCContrib">MvcContrib</a> where it lives in its
own assembly, MvcContrib.FluentHtml.</span></b></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>A few weeks ago I attended a presentation at the <a
href="http://www.kaizenconf.com/">KaizenConf</a> by <a
href="http://codebetter.com/blogs/jeremy.miller">Jeremy Miller </a>and <a
href="http://www.lostechies.com/blogs/chad_myers">Chad Myers</a> in which they
showed their “opinionated” approach to MS MVC.&nbsp; One of the things that
caught my attention was the fluent interface they had created for HTML
generation.&nbsp;&nbsp; So I went home and started working on this for my own
application.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>I have put my work in progress here: <span class=msoDel><del><a
href="http://code.google.com/p/mvcfluenthtml/">MvcFluentHtml</a>.</del></span></span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>Incidentally, since I started working on MvcFluentHtml,
Chad and Jeremy have put out some bits of their code as <a
href="http://code.google.com/p/opinionatedmvc/">opinionatedmvc</a>.&nbsp; And
Karl Seguin, who also saw their presentation, has created some fluent HTML
stuff which he shows in <a
href="http://codebetter.com/blogs/karlseguin/archive/2008/11/13/textboxfor-u-gt-u-name-unleash-the-power.aspx">this
blog post</a>.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>So what problem does MvcFluentHtml solve?&nbsp; Can’t I be
happy with the HtmlHelpers that come with the framework?</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>I have come to truly hate the overloading approach taken
by the out-of-the-box Html helpers.&nbsp; Methods with long signatures are hard
to read, and it takes investigation to see what’s happening.&nbsp; What’s
worse, you must worry about problems with overload resolution, especially when
some parameters are typed as object.&nbsp; As a result, HtmlHelper is not
easily extensible.&nbsp; It’s hard to bend it to do new things without breaking
existing functionality.&nbsp; We saw an example of this when Beta1 was released
with <a
href="http://stackoverflow.com/questions/208468/issues-during-aspnet-mvc-upgrade-from-preview-5-to-beta#219181">breaking
changes</a>.&nbsp; With a fluent interface, it’s much easier to extend with new
behaviors while leaving existing behaviors closed.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>So how does it work?&nbsp; Let’s start with some examples
of how you might use it in your views:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>&lt;%=</span><span
lang=EN style='font-family:Consolas;color:blue'>this</span><span lang=EN
style='font-family:Consolas;color:black'>.TextBox(x =&gt; x.FirstName).Class(</span><span
lang=EN style='font-family:Consolas;color:#006080'>&quot;required&quot;</span><span
lang=EN style='font-family:Consolas;color:black'>).Label(</span><span lang=EN
style='font-family:Consolas;color:#006080'>&quot;First Name:&quot;</span><span
lang=EN style='font-family:Consolas;color:black'>)%&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>&lt;%=</span><span
lang=EN style='font-family:Consolas;color:blue'>this</span><span lang=EN
style='font-family:Consolas;color:black'>.Select(x =&gt;
x.ClientId).Options((SelectList)ViewData[</span><span lang=EN style='font-family:
Consolas;color:#006080'>&quot;clients&quot;</span><span lang=EN
style='font-family:Consolas;color:black'>]).Label(</span><span lang=EN
style='font-family:Consolas;color:#006080'>&quot;Client:&quot;</span><span
lang=EN style='font-family:Consolas;color:black'>)%&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>&lt;%=</span><span
lang=EN style='font-family:Consolas;color:blue'>this</span><span lang=EN
style='font-family:Consolas;color:black'>.MultiSelect(x =&gt;
x.UserId).Options(ViewModel.Users)%&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:black'>&lt;%=</span><span lang=EN
style='font-family:Consolas;color:blue'>this</span><span lang=EN
style='font-family:Consolas;color:black'>.CheckBox(</span><span lang=EN
style='font-family:Consolas;color:#006080'>&quot;enabled&quot;</span><span
lang=EN style='font-family:Consolas;color:black'>).LabelAfter(</span><span
lang=EN style='font-family:Consolas;color:#006080'>&quot;Enabled&quot;</span><span
lang=EN style='font-family:Consolas;color:black'>).Title(&quot;Click to
enable.&quot;).Styles(vertical_align =&gt; &quot;middle&quot;)%&gt;</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>As you can see in this example, the helpers are methods of
the view itself, not of some helper class.&nbsp; You will also notice two
different kinds of methods.&nbsp; One kind takes the name as a string which is
meant to evaluate to an object in the ViewData dictionary.&nbsp; These methods
are extensions of IViewDataContainer, and as such they can be used in any type
of view (ViewPage, ViewPage&lt;T&gt;, ViewUserControl, ViewUserControl&lt;T&gt;,
ViewMasterPage, ViewMasterPage&lt;T&gt;).&nbsp;&nbsp; The other kind takes a
lambda expression that refers to a member of ViewData.Model.&nbsp; This kind of
method extends a new interface that is defined in <span class=msoDel><del>MvcFluentHtml</del></span>
MvcContrib.FluentHtml:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:blue'>public</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:blue'>interface</span><span lang=EN
style='font-family:Consolas;color:black'> IViewModelContainer&lt;T&gt; </span><span
lang=EN style='font-family:Consolas;color:blue'>where</span><span lang=EN
style='font-family:Consolas;color:black'> T : </span><span lang=EN
style='font-family:Consolas;color:blue'>class</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>    T ViewModel {
get; }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>   
IEnumerable&lt;IMemberBehavior&gt; MemberBehaviors { get; }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:black'>}</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>Both kinds of methods set the value (value attribute,
inner text, etc.) from ViewData.&nbsp; Both kinds set the name of form elements
so that most binders will pick up the value on post.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>So what must you do before you can use these methods in
your views?&nbsp; To use the methods that extend IViewDataContainer,
nothing.&nbsp; To use the methods that extend IViewModelContainer&lt;T&gt;, you
have some options:</span></p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in;line-height:
15.6pt'><span lang=EN style='font-size:9.0pt;color:#333333'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN style='font-size:9.0pt;color:#333333'>Derive your strongly-typed views
from ModelViewPage&lt;T&gt;, ModelViewUserControl&lt;T&gt; or
ModelViewMasterPage&lt;T&gt; which are bits of MvcFluentHtml. </span></p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in;line-height:
15.6pt'><span lang=EN style='font-size:9.0pt;color:#333333'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN style='font-size:9.0pt;color:#333333'>Implement
IViewModelContainer&lt;T&gt; directly on your views. </span></p>

<p class=MsoNormal style='margin-left:1.0in;text-indent:-.25in;line-height:
15.6pt'><span lang=EN style='font-size:9.0pt;color:#333333'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
lang=EN style='font-size:9.0pt;color:#333333'>Define your own base view classes
that implement IViewModelContainer&lt;T&gt;. </span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>There is a fourth option.&nbsp; MvcFluentHtml contains a
set of classes, ConventionModelViewPage&lt;T&gt;,
ConventionModelViewUserControl&lt;T&gt; and
ConventionModelViewMasterPage&lt;T&gt;.&nbsp; These classes apply some default
behaviors.&nbsp; These behaviors operate on certain model attributes, which are
also part of <span class=msoDel><del>MvcFluentHtml</del></span> MvcContrib.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>So given this model:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:blue'>public</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:blue'>class</span><span lang=EN
style='font-family:Consolas;color:black'> Person</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>    [Required]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>   
[MaxLength(200)]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>    </span><span
lang=EN style='font-family:Consolas;color:blue'>public</span><span lang=EN
style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:blue'>string</span><span lang=EN
style='font-family:Consolas;color:black'> Name { get; set; }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:black'>}</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>And this in the view:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:black'>&lt;%</span><span lang=EN
style='font-family:Consolas;color:blue'>this</span><span lang=EN
style='font-family:Consolas;color:black'>.TextBox(x =&gt; x.Name)%&gt;</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>The resulting HTML would be something like:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:blue'>&lt;</span><span lang=EN
style='font-family:Consolas;color:maroon'>input</span><span lang=EN
style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>type</span><span lang=EN
style='font-family:Consolas;color:blue'>=&quot;text&quot;</span><span lang=EN
style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>maxlength</span><span lang=EN
style='font-family:Consolas;color:blue'>=&quot;200&quot;</span><span lang=EN
style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>id</span><span lang=EN style='font-family:
Consolas;color:blue'>=&quot;Name&quot;</span><span lang=EN style='font-family:
Consolas;color:black'> </span><span lang=EN style='font-family:Consolas;
color:red'>name</span><span lang=EN style='font-family:Consolas;color:blue'>=&quot;Name&quot;</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>class</span><span lang=EN
style='font-family:Consolas;color:blue'>=&quot;required&quot;</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>value</span><span lang=EN
style='font-family:Consolas;color:blue'>=&quot;Pete&quot;/&gt;</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>These attributes are found in a separate assembly, <span
class=msoDel><del>MvcFluentHtml.Attributes</del></span>
MvcContrib.ModelAttributes.&nbsp; So in case your models are in a separate
assembly from your MVC web UI, you don’t have to reference the UI specific bits
in your model assembly.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>But what if you want different behaviors and different
attributes?&nbsp; You can create custom behaviors by implementing
IMemberBehavior.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:blue'>public</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:blue'>interface</span><span lang=EN
style='font-family:Consolas;color:black'> IMemberBehavior</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>     </span><span
lang=EN style='font-family:Consolas;color:blue'>void</span><span lang=EN
style='font-family:Consolas;color:black'> Execute(IMemberElement element);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:black'>}</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>For example:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:blue'>public</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:blue'>class</span><span lang=EN
style='font-family:Consolas;color:black'> MyMemberBehavior1 : IMemberBehavior</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>    </span><span
lang=EN style='font-family:Consolas;color:blue'>public</span><span lang=EN
style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:blue'>void</span><span lang=EN
style='font-family:Consolas;color:black'> Execute(IMemberElement element)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>    {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>        var
helper = </span><span lang=EN style='font-family:Consolas;color:blue'>new</span><span
lang=EN style='font-family:Consolas;color:black'>
MemberBehaviorHelper&lt;RequiredAttribute&gt;();</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>        var
attribute = helper.GetAttribute(element);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>        </span><span
lang=EN style='font-family:Consolas;color:blue'>if</span><span lang=EN
style='font-family:Consolas;color:black'> (attribute  != </span><span lang=EN
style='font-family:Consolas;color:blue'>null</span><span lang=EN
style='font-family:Consolas;color:black'>)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>        {</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>           
element.SetAttr(</span><span lang=EN style='font-family:Consolas;color:#006080'>&quot;class&quot;</span><span
lang=EN style='font-family:Consolas;color:black'>, </span><span lang=EN
style='font-family:Consolas;color:#006080'>&quot;req&quot;</span><span lang=EN
style='font-family:Consolas;color:black'>);</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>        }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>    }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:black'>}</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>Then create your own “opinionated” views something like
this:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:blue'>public</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:blue'>class</span><span lang=EN
style='font-family:Consolas;color:black'> MyOpinionatedModelViewPage&lt;T&gt; :
ModelViewPage&lt;T&gt; </span><span lang=EN style='font-family:Consolas;
color:blue'>where</span><span lang=EN style='font-family:Consolas;color:black'>
T : </span><span lang=EN style='font-family:Consolas;color:blue'>class</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>     </span><span
lang=EN style='font-family:Consolas;color:blue'>public</span><span lang=EN
style='font-family:Consolas;color:black'> MyOpinionatedModelViewPage() : </span><span
lang=EN style='font-family:Consolas;color:blue'>base</span><span lang=EN
style='font-family:Consolas;color:black'>(</span><span lang=EN
style='font-family:Consolas;color:blue'>new</span><span lang=EN
style='font-family:Consolas;color:black'> MyMemberBehavior1(), </span><span
lang=EN style='font-family:Consolas;color:blue'>new</span><span lang=EN
style='font-family:Consolas;color:black'> MyMemberBehavior2()) { }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:black'>}</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>Or using your favorite IoC container:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:blue'>public</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:blue'>class</span><span lang=EN
style='font-family:Consolas;color:black'> MyOpinionatedModelViewPage&lt;T&gt; :
ModelViewPage&lt;T&gt; </span><span lang=EN style='font-family:Consolas;
color:blue'>where</span><span lang=EN style='font-family:Consolas;color:black'>
T : </span><span lang=EN style='font-family:Consolas;color:blue'>class</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>     </span><span
lang=EN style='font-family:Consolas;color:blue'>public</span><span lang=EN
style='font-family:Consolas;color:black'>
MyOpinionatedModelViewPage(IMyMemberBehavior1Marker myBehavior1,
IMyMemberBehavior2Marker myBehavior1)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
0in;margin-left:39.75pt;margin-bottom:.0001pt;line-height:normal;background:
white'><span lang=EN style='font-family:Consolas;color:black'>        : </span><span
lang=EN style='font-family:Consolas;color:blue'>base</span><span lang=EN
style='font-family:Consolas;color:black'>(myMemberBehavior1, myMemberBehavior1)
{ }</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
3.75pt;margin-left:39.75pt;line-height:normal;background:white'><span lang=EN
style='font-family:Consolas;color:black'>}</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>One final point.&nbsp; The goal of MvcFluentHtml was to
leave the opinions to you.&nbsp; We did this by allowing you to define your own
behaviors.&nbsp; However, it is not without opinions regarding practices. For
example the Select object does not have any “first option” functionality.
That’s because in my opinion adding options to selects is not a view concern.
Also, while we allow you to set inline styles we do not expose any methods that
abstract styling (e.g., Width, TextAlign).&nbsp; That’s because we want to
encourage semantic HTML and leave the styling to CSS.&nbsp; For the same reason
we do not render any layout tags (e.g. &lt;br/&gt;).&nbsp; Also we generally
don’t try to abstract the language of HTML (e.g., we use “Select” instead of
“DropDownList”).&nbsp; In my opinion, MvcFluentHtml is more of a helper library
than an abstraction over HTML, and moving developers away from understanding
what’s going on with the HTML is not a good thing.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>I heartily welcome critique, especially if you want to
contribute! Areas that I know need some work are: radio button, radio button
list, checkbox list, performance tweaks, XML comments, and CI.</span></p>

<p class=MsoNormal>&nbsp;</p>

<b><span lang=EN style='font-size:19.0pt;line-height:115%;font-family:"Verdana","sans-serif";
color:#333333'><br clear=all style='page-break-before:always'>
</span></b>

<p class=MsoNormal><b><span lang=EN style='font-size:19.0pt;line-height:115%;
font-family:"Tahoma","sans-serif";color:#333333'>&nbsp;</span></b></p>

<h3 style='margin:0in;margin-bottom:.0001pt'><b><span lang=EN style='font-size:
19.0pt;color:#333333'><a
href="http://lunaverse.wordpress.com/2009/01/02/editing-a-variable-length-list-of-items-with-mvccontribfluenthtml/">Editing
a Variable Length List Of Items With&nbsp;MvcContrib.FluentHtml</a></span></b></h3>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Steve Sanderson recently
showed&nbsp; <a
href="http://blog.codeville.net/2008/12/22/editing-a-variable-length-list-of-items-in-aspnet-mvc/">a
nifty way to edit variable length lists with MS MVC</a> .&nbsp; I commented
that I liked his approach.&nbsp; I also mentioned that MvcContrib.FluentHtml
might be used to improve a bit of awkward code used to build HTML element
names.&nbsp; To illustrate my point I offered some code examples.&nbsp;&nbsp;
Steve responded by pointing out the shortcomings of&nbsp; my examples.&nbsp; He
was correct. &nbsp; I had not really thought it through.&nbsp; While my
examples illustrated the use of FluentHtml, they missed the mark in terms of
showing a real solution.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Still I knew that the
basic idea of was sound.&nbsp; This article shows in detail how to use
MvcContrib.FluentHtml to edit a variable length list of items.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'><a
href="http://www.lunaversesoftware.com/codebits/MvcEditableListDemo.zip">Get
The Code</a></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>I will use the same
basic application as Steve did — a simple gift request form.</span></p>

<h2><span lang=EN style='font-size:11.5pt;line-height:115%;color:#333333'>Setup</span></h2>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>We start with the Gift
entity:</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'><!-- code formatted by http://manoli.net/csharpformat/ -->public</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>class</span></span><span lang=EN
style='font-family:Consolas;color:black'> Gift</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>{</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>public</span></span><span lang=EN
style='font-family:Consolas;color:black'> </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>int</span></span><span lang=EN
style='font-family:Consolas;color:black'> Id { get; set; }</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>public</span></span><span lang=EN
style='font-family:Consolas;color:black'> </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>string</span></span><span lang=EN
style='font-family:Consolas;color:black'> Name { get; set; }</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>public</span></span><span lang=EN
style='font-family:Consolas;color:black'> </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>decimal</span></span><span lang=EN
style='font-family:Consolas;color:black'> Price { get; set; }</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>}</span></p>

<h2><span lang=EN style='font-size:11.5pt;line-height:115%;color:#333333'>Render
The View</span></h2>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Our view derives from
MvcContrib.FluentHtml.ModelViewPage&lt;IList&lt;Gift&gt;&gt; and is rendered
via a controller action:</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->[AcceptGet]</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>public</span></span><span lang=EN
style='font-family:Consolas;color:black'> ViewResult Index()</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>{</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>     ViewData.Model = </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>new</span></span><span lang=EN
style='font-family:Consolas;color:black'> List&lt;Gift&gt;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>     {</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>         </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>new</span></span><span lang=EN style='font-family:
Consolas;color:black'> Gift {Id = 1, Name = </span><span class=str2><span
lang=EN style='font-family:Consolas'>&quot;Tar Tinker&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>, Price = 23.44m},</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>         </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>new</span></span><span lang=EN style='font-family:
Consolas;color:black'> Gift {Id = 2, Name = </span><span class=str2><span
lang=EN style='font-family:Consolas'>&quot;Flu Flooper&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>, Price = 11.42m}</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>     };</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>     </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>return</span></span><span lang=EN
style='font-family:Consolas;color:black'> View();</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>}</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>The view presents a list
of the gifts:</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;</span></span><span
class=html2><span lang=EN style='font-family:Consolas'>form</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>action</span></span><span lang=EN
style='font-family:Consolas;color:black'>=&quot;&lt;%=</span><span class=attr2><span
lang=EN style='font-family:Consolas'>Html</span></span><span lang=EN
style='font-family:Consolas;color:black'>.</span><span class=attr2><span
lang=EN style='font-family:Consolas'>BuildUrlFromExpression&lt;HomeController</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>&gt;</span></span><span
lang=EN style='font-family:Consolas;color:black'>(x =</span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span><span lang=EN
style='font-family:Consolas;color:black'> x.Index(null))<span class=asp2>%&gt;</span>&quot;
method=&quot;post&quot;</span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>div</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>id</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;addGiftItem&quot;&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>a</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>href</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;&quot;</span></span><span lang=EN style='font-family:Consolas;
color:black'> </span><span class=attr2><span lang=EN style='font-family:Consolas'>id</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>=&quot;addGift&quot;&gt;</span></span><span
lang=EN style='font-family:Consolas;color:black'>Add</span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&lt;/</span></span><span class=html2><span
lang=EN style='font-family:Consolas'>a</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;/</span></span><span class=html2><span
lang=EN style='font-family:Consolas'>div</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>fieldset</span></span><span lang=EN
style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>id</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;giftLineItems&quot;&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>legend</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span><span lang=EN
style='font-family:Consolas;color:black'>Gifts</span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&lt;/</span></span><span class=html2><span
lang=EN style='font-family:Consolas'>legend</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        <span class=asp2>&lt;%</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>for</span></span><span
lang=EN style='font-family:Consolas;color:black'> (var i = 0; i &lt;
ViewData.Model.Count; i++) {<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>            <span class=asp2>&lt;%</span>Html.RenderPartial(</span><span
class=str2><span lang=EN style='font-family:Consolas'>&quot;GiftLineItem&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>, ViewData.Model, </span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>new</span></span><span
lang=EN style='font-family:Consolas;color:black'> ViewDataDictionary {{</span><span
class=str2><span lang=EN style='font-family:Consolas'>&quot;index&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>, i}});<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        <span class=asp2>&lt;%</span>}<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;/</span></span><span class=html2><span
lang=EN style='font-family:Consolas'>fieldset</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.SubmitButton(</span><span
class=str2><span lang=EN style='font-family:Consolas'>&quot;Save&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>)<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;/</span></span><span class=html2><span
lang=EN style='font-family:Consolas'>form</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>GiftLineItem is a user
control that derives from
MvcContrib.FluentHtml.ViewModelUserControl&lt;IList&lt;Gift&gt;&gt;:</span></p>

<p class=MsoNormal style='background:white'><span class=asp2><span lang=EN
style='font-family:Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;%</span></span><span
lang=EN style='font-family:Consolas;color:black'>var i = (</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>int</span></span><span
lang=EN style='font-family:Consolas;color:black'>)ViewData[</span><span
class=str2><span lang=EN style='font-family:Consolas'>&quot;index&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>];<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>div</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>class</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;giftLineItem&quot;&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.Hidden(x =&gt; x[i].Id)<span
class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.TextBox(x =&gt;
x[i].Name).Label(</span><span class=str2><span lang=EN style='font-family:Consolas'>&quot;Name
of gift:&quot;</span></span><span lang=EN style='font-family:Consolas;
color:black'>)<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.TextBox(x =&gt;
x[i].Price).Label(</span><span class=str2><span lang=EN style='font-family:
Consolas'>&quot;Price ($):&quot;</span></span><span lang=EN style='font-family:
Consolas;color:black'>)<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>a</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>href</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;&quot;</span></span><span lang=EN style='font-family:Consolas;
color:black'> </span><span class=attr2><span lang=EN style='font-family:Consolas'>class</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>=&quot;removeGift&quot;&gt;</span></span><span
lang=EN style='font-family:Consolas;color:black'>Delete</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>&lt;/</span></span><span
class=html2><span lang=EN style='font-family:Consolas'>a</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;/</span></span><span class=html2><span
lang=EN style='font-family:Consolas'>div</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>You might observe that
this user control uses IList&lt;Gift&gt; as its model whereas Steve’s uses
Gift. &nbsp; But the user control represents one gift, right?&nbsp; Have I
sacrificed cohesion? Yes, however a closer look shows that neither Steve’s user
control nor mine is cohesive.&nbsp; That is, neither stands alone outside of the
context of a list.&nbsp; We simply use different techniques to name the
elements within the context of an owning list.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Here’s the rendered view
(after clicking “Add” twice):</span></p>

<p><span style='font-size:9.0pt;color:#333333'><img border=0 width=600
height=306 id="Picture 1" src="FluentHtml_files/image001.gif"
alt=variablelineitemdemo1.gif></span></p>

<h2><span lang=EN style='font-size:11.5pt;line-height:115%;color:#333333'>Add
Behavior</span></h2>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Now we need to add
behavior to the “Add” and “Delete” links.&nbsp; For that we’ll use jQuery:</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->$(document).ready(function()
{</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>&nbsp;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    var nextGiftIndex = <span class=asp2>&lt;%</span>=ViewData.Model.Count<span
class=asp2>%&gt;</span>;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    setRemoveLinks();</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>&nbsp;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    $('#addGift').click(function() {</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        $.get('/Home/AddGift?index=' + nextGiftIndex,
'html', function(lineItemHtml) {</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>            $('#giftLineItems').append(lineItemHtml);</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>            setRemoveLinks();</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        });</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        nextGiftIndex++;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        return false;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    });</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>});</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>function setRemoveLinks() {</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    $('a.removeGift').click(function() {</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        $(this).parent('div').remove();</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>        return false;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    });</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>}</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Clicking the “Add” link
calls the AddGift action asyncronously and passes the index of the item to be
added.&nbsp; The index value is initialized when the page is rendered and
incremented on the client side with each addition.&nbsp; The “Delete” links are
wired up to a simple function that removes the parent div.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>The AddGift action
simply renders the user control using the specified index:</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'><!-- code formatted by http://manoli.net/csharpformat/ -->public</span></span><span
lang=EN style='font-family:Consolas;color:black'> ViewResult AddGift(</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>int</span></span><span
lang=EN style='font-family:Consolas;color:black'> index)</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>{</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    ViewData[</span><span class=str2><span lang=EN
style='font-family:Consolas'>&quot;index&quot;</span></span><span lang=EN
style='font-family:Consolas;color:black'>] = index;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>return</span></span><span lang=EN
style='font-family:Consolas;color:black'> View(</span><span class=str2><span
lang=EN style='font-family:Consolas'>&quot;~/Views/Home/GiftLineItem.ascx&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>);</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>}</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Notice we have not
specified a model for the user control, which means it will be null.&nbsp; As a
result, the name and price textboxes will be blank, which is what we
want.&nbsp; And by specifying the desired index, these textboxes will be named
such that they will bind correctly when form is saved.</span></p>

<h2><span lang=EN style='font-size:11.5pt;line-height:115%;color:#333333'>Save
Changes</span></h2>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Clicking the “Save”
button posts the form to the following action:</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->[AcceptPost]</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>public</span></span><span lang=EN
style='font-family:Consolas;color:black'> ViewResult
Index([Deserialize]IList&lt;Gift&gt; gifts)</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>{</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=rem2><span lang=EN
style='font-family:Consolas'>//code to save the changes</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    ViewData.Model = gifts;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>return</span></span><span lang=EN
style='font-family:Consolas;color:black'> View();</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>}</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Notice that the
parameter “gifts” is decorated with the Deserialize attribute. This attribute
uses MvcContrib’s NameValueDeserializer to obtain our collection of gifts from
the form post.&nbsp; It does not require that collections be indexed purely in
sequence. Thus it handles any holes left by deleted line items.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>(NOTE: I expected that
using [Bind(Prefix = &quot;&quot;)] would work the same as [Deserialize], but
it does not.&nbsp; Seems to be a limitation.)</span></p>

<h2><span lang=EN style='font-size:11.5pt;line-height:115%;color:#333333'>Conclusion</span></h2>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>The solution presented
here differs from Steve’s in that it uses FluentHtml. There are a few other
differences, such as jQuery versus MS Ajax.&nbsp; My point is not present a
solution that is superior, rather just to show how it might be done using&nbsp;
FluentHtml and expressions to avoid some fiddly construction of HTML element
names in views.</span></p>

<span lang=EN style='font-size:9.0pt;line-height:115%;font-family:"Verdana","sans-serif";
color:#333333'><br clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal><span lang=EN style='font-size:9.0pt;line-height:115%;
color:#333333'>&nbsp;</span></p>

<h3 style='margin:0in;margin-bottom:.0001pt'><b><span lang=EN style='font-size:
19.0pt;color:#333333'><a
href="http://lunaverse.wordpress.com/2009/01/13/editing-a-variable-length-list-of-items-with-mvccontribfluenthtml-take-2/">Editing
a Variable Length List Of Items With MvcContrib.FluentHtml - Take&nbsp;2</a></span></b></h3>

<p class=MsoNormal><span lang=EN style='font-size:9.0pt;line-height:115%;
color:#CCCCCC'>Filed under: <a href="http://en.wordpress.com/tag/ms-mvc/"
title="View all posts in MS MVC"><span style='color:#CCCCCC'>MS MVC</span></a>,
<a href="http://lunaverse.wordpress.com/category/uncategorized/"
title="View all posts in Uncategorized"><span style='color:#CCCCCC'>Uncategorized</span></a>
— Tim Scott @ 11:48 pm </span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>In a <a
href="http://lunaverse.wordpress.com/2009/01/02/editing-a-variable-length-list-of-items-with-mvccontribfluenthtml/">previous
post</a>, I showed how to edit a variable length list using
MvcContrib.FluentHtml.&nbsp; The post was inspired by a <a
href="http://blog.codeville.net/2008/12/22/editing-a-variable-length-list-of-items-in-aspnet-mvc/">post
on the same topic by Steve Sanderson</a>.&nbsp; Steve commented on my post
pointing out some limitations.&nbsp; To address these limitations required some
enhancements to MvcContrib.FluentHtml and some changes to my example.&nbsp; So
here we go with take 2.</span></p>

<h1><span lang=EN style='font-size:14.5pt;line-height:115%;color:#333333'>MvcContrib.FluentHtml
Enhancements</span></h1>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>The limitations were
mostly related to handling validation.&nbsp; To support validation using Model
State we have added to MvcContrib.FluentHtml:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#333333;line-height:15.6pt'><span lang=EN
     style='font-size:9.0pt'>Html Prefix Support </span></li>
 <li class=MsoNormal style='color:#333333;line-height:15.6pt'><span lang=EN
     style='font-size:9.0pt'>A Validation Helper </span></li>
 <li class=MsoNormal style='color:#333333;line-height:15.6pt'><span lang=EN
     style='font-size:9.0pt'>List Indexing Support </span></li>
</ul>

<h2><span lang=EN style='font-size:11.5pt;line-height:115%;color:#333333'>Html
Prefix Support</span></h2>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>HTML elements generated
for strongly typed views have no prefix by default.&nbsp; So elements for
ModelViewPage&lt;Person&gt; might look something like this:</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;</span></span><span
class=html2><span lang=EN style='font-family:Consolas'>input</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>name</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;FirstName&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>id</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;FirstName&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>value</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;Jim&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>type</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;text&quot;/&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>input</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>name</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;LastName&quot;</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>id</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;LastName&quot;</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>value</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;Smith&quot;</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>type</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;text&quot;/&gt;</span></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>The problem is, neither
MvcContrib’s NameValueSerializer nor MS MVC’s default model binder fully handle
this scenario.&nbsp;&nbsp; While NameValueDeserializer does the binding just
fine, it does not place bind errors into ModelState.&nbsp; The default model
binder does not handle quite handle the binding — it does not deserialize
enumerable properties when no prefix is used.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>To bind everything
correctly <em><span style='font-family:"Verdana","sans-serif"'>and </span></em>get
any errors into ModelState we need a prefix.&nbsp; One way to handle this is to
wrap our primary model in a view model. This is a valid pattern. It’s even a
standard for some applications. However, we don’t want to <em><span
style='font-family:"Verdana","sans-serif"'>have to</span></em> do this just to
get a prefix. So we provide a way to specify a prefix for a strongly typed
view.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Either in the
code-behind:</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'><!-- code formatted by http://manoli.net/csharpformat/ -->public</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>class</span></span><span lang=EN
style='font-family:Consolas;color:black'> Index :
ModelViewPage&lt;IList&lt;Gift&gt;&gt;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>{</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>public</span></span><span lang=EN
style='font-family:Consolas;color:black'> Index() : </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>base</span></span><span lang=EN
style='font-family:Consolas;color:black'>(</span><span class=str2><span
lang=EN style='font-family:Consolas'>&quot;person&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>) { }</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>}</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Or in the view:</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;%</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.HtmlNamePrefix = </span><span
class=str2><span lang=EN style='font-family:Consolas'>&quot;person&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>%&gt;</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Thus our HTML elements
will be prefixed:</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;</span></span><span
class=html2><span lang=EN style='font-family:Consolas'>input</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>name</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;person.FirstName&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>id</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;person_FirstName&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>value</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;Jim&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>type</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;text&quot;/&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>input</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>name</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;person.LastName&quot;</span></span><span lang=EN
style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>id</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;person_LastName&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>value</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;Smith&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>type</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;text&quot;/&gt;</span></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Then in our action
method, we can use the default binder without any attribute.&nbsp; Any bind
errors will be captured in ModelState.</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->[AcceptPost]</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>public</span></span><span lang=EN
style='font-family:Consolas;color:black'> ViewResult Index(Person person)</span></p>

<h2><span lang=EN style='font-size:11.5pt;line-height:115%;color:#333333'>New
Validation Helper</span></h2>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>We have added validation
support to FluentHtml for strongly typed views. The following works basically
the same as HtmlHelper’s ValidationMessage.</span></p>

<p class=MsoNormal style='background:white'><span class=asp2><span lang=EN
style='font-family:Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;%</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.ValidationMessage(x =&gt;
x.Price, </span><span class=str2><span lang=EN style='font-family:Consolas'>&quot;Price
must be numeric.&quot;</span></span><span lang=EN style='font-family:Consolas;
color:black'>)<span class=asp2>%&gt;</span></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>We have also added a
behavior to ModelViewPage&lt;T&gt;, ModelViewMasterPage&lt;T&gt; and
ModelViewUserControl&lt;T&gt; which basically mimics validation used by
HtmlHelper.&nbsp; That is, it adds a CSS class “input-validation-error” to any
HTML element with an error in ModelState.&nbsp; If you wish, you can remove
this behavior or change the CSS class name in the derived class.</span></p>

<h2><span lang=EN style='font-size:11.5pt;line-height:115%;color:#333333'>List
Indexing Support</span></h2>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>MS MVC uses <a
href="http://haacked.com/archive/2008/10/23/model-binding-to-a-list.aspx">a
special technique</a> to deserialize enumerable properties.&nbsp; With this
technique you set an arbitrary value in a specially named hidden element to
signify that a group of elements belongs to a particular instance of the
enumerable property. This has an advantage over using positional indexes in
that it preserves the identity of an instance across posts, which is necessary
for ModelState based validation to work properly.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Therefore, we have added
support for this to MvcContrib.FluentHtml.&nbsp; Let’s assume
ModelViewPage&lt;IList&lt;Person&gt;&gt; with a prefix of “persons”.&nbsp; Then
this markup:</span></p>

<p class=MsoNormal style='background:white'><span class=asp2><span lang=EN
style='font-family:Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;%</span></span><span
lang=EN style='font-family:Consolas;color:black'>var id = Model[i].Id;<span
class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=asp2><span lang=EN
style='font-family:Consolas;color:black'>&lt;%</span></span><span lang=EN
style='font-family:Consolas;color:black'>=</span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>this</span></span><span lang=EN
style='font-family:Consolas;color:black'>.Index(x =&gt; x).Value(id)<span
class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=asp2><span lang=EN
style='font-family:Consolas;color:black'>&lt;%</span></span><span lang=EN
style='font-family:Consolas;color:black'>=</span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>this</span></span><span lang=EN
style='font-family:Consolas;color:black'>.TextBox(x =&gt; x[id].FirstName).Value(Model[i].FirstName)<span
class=asp2>%&gt;</span></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Will generate HTML like
this:</span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;</span></span><span
class=html2><span lang=EN style='font-family:Consolas'>input</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>id</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;persons_Index_123&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>name</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;persons.Index&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>value</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;123&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>type</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;hidden&quot;/&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>input</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>id</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;persons[123]_FirstName&quot;</span></span><span lang=EN
style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>name</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;persons[123].FirstName&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'> </span><span class=attr2><span
lang=EN style='font-family:Consolas'>value</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>=&quot;Jim&quot;
type=&quot;text&quot;/&gt;</span></span></p>

<h1><span lang=EN style='font-size:14.5pt;line-height:115%;color:#333333'>Changes
To Our Example</span></h1>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>So based on these
changes to FluentHtml we made a few changes to the “Gift Request Form” demo
from the previous post. In the main view:</span></p>

<p class=MsoNormal style='background:white'><span class=asp2><span lang=EN
style='font-family:Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;%</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>for</span></span><span
lang=EN style='font-family:Consolas;color:black'> (var i = 0; i &lt;
ViewData.Model.Count; i++) {<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>ViewData[</span><span
class=str2><span lang=EN style='font-family:Consolas'>&quot;index&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>] = i;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    Html.RenderPartial(</span><span class=str2><span
lang=EN style='font-family:Consolas'>&quot;GiftLineItem&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>);<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=asp2><span lang=EN
style='font-family:Consolas;color:black'>&lt;%</span></span><span lang=EN
style='font-family:Consolas;color:black'>}<span class=asp2>%&gt;</span></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>And in the user control:</span></p>

<p class=MsoNormal style='background:white'><span class=asp2><span lang=EN
style='font-family:Consolas;color:black'><!-- code formatted by http://manoli.net/csharpformat/ -->&lt;%</span></span><span
lang=EN style='font-family:Consolas;color:black'>var i = (</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>int</span></span><span
lang=EN style='font-family:Consolas;color:black'>)ViewData[</span><span
class=str2><span lang=EN style='font-family:Consolas'>&quot;index&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>];</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>  var gift = ViewModel == </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>null</span></span><span lang=EN
style='font-family:Consolas;color:black'> ? </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>null</span></span><span lang=EN
style='font-family:Consolas;color:black'> : ViewModel[i];</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>  var id = gift == </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>null</span></span><span lang=EN
style='font-family:Consolas;color:black'> ? -1 * </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>new</span></span><span lang=EN
style='font-family:Consolas;color:black'> Random().Next() : gift.Id;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>  var name = gift == </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>null</span></span><span lang=EN
style='font-family:Consolas;color:black'> ? </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>null</span></span><span lang=EN
style='font-family:Consolas;color:black'> : gift.Name;</span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>  var price = gift == </span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>null</span></span><span lang=EN
style='font-family:Consolas;color:black'> ? (</span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>decimal</span></span><span lang=EN
style='font-family:Consolas;color:black'>?)</span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>null</span></span><span lang=EN
style='font-family:Consolas;color:black'> : gift.Price;<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>div</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>class</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;giftLineItem&quot;&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.Index(x =&gt; x, x =&gt;
x[i].Id)<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.Hidden(x =&gt;
x[id].Id).Value(id)<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.TextBox(x =&gt;
x[id].Name).Value(name).Label(</span><span class=str2><span lang=EN
style='font-family:Consolas'>&quot;Name of gift:&quot;</span></span><span
lang=EN style='font-family:Consolas;color:black'>)<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.TextBox(x =&gt;
x[id].Price).Value(price).Label(</span><span class=str2><span lang=EN
style='font-family:Consolas'>&quot;Price ($):&quot;</span></span><span lang=EN
style='font-family:Consolas;color:black'>)<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    <span class=asp2>&lt;%</span>=</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>this</span></span><span
lang=EN style='font-family:Consolas;color:black'>.ValidationMessage(x =&gt;
x[id].Price, </span><span class=str2><span lang=EN style='font-family:Consolas'>&quot;Must
be a number&quot;</span></span><span lang=EN style='font-family:Consolas;
color:black'>)<span class=asp2>%&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span lang=EN style='font-family:
Consolas;color:black'>    </span><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;</span></span><span class=html2><span lang=EN
style='font-family:Consolas'>a</span></span><span lang=EN style='font-family:
Consolas;color:black'> </span><span class=attr2><span lang=EN style='font-family:
Consolas'>href</span></span><span class=kwrd2><span lang=EN style='font-family:
Consolas'>=&quot;&quot;</span></span><span lang=EN style='font-family:Consolas;
color:black'> </span><span class=attr2><span lang=EN style='font-family:Consolas'>class</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>=&quot;removeGift&quot;&gt;</span></span><span
lang=EN style='font-family:Consolas;color:black'>Delete</span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>&lt;/</span></span><span
class=html2><span lang=EN style='font-family:Consolas'>a</span></span><span
class=kwrd2><span lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p class=MsoNormal style='background:white'><span class=kwrd2><span lang=EN
style='font-family:Consolas'>&lt;/</span></span><span class=html2><span
lang=EN style='font-family:Consolas'>div</span></span><span class=kwrd2><span
lang=EN style='font-family:Consolas'>&gt;</span></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Viola, validation works:</span></p>

<p><span style='font-size:9.0pt;color:#333333'><img border=0 width=600
height=201 id="Picture 3" src="FluentHtml_files/image002.png"
alt=showvalidationerror1></span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>Note that we stole
Steve’s technique of using random negative Ids for unsaved instances, which we
will handle in the save method on the server.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><b><span lang=EN style='font-size:19.0pt;font-family:"Tahoma","sans-serif";
color:#333333'><a
href="http://lunaverse.wordpress.com/2009/02/05/eliminate-magic-strings-in-javascript-with-mvccontribfluenthtml/">Eliminate
Magic Strings In Javascript With&nbsp;MvcContrib.FluentHtml</a></span></b></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span lang=EN style='font-size:9.0pt;color:#CCCCCC'>Filed under: <a
href="http://lunaverse.wordpress.com/category/uncategorized/"
title="View all posts in Uncategorized"><span style='color:#CCCCCC'>Uncategorized</span></a>
— Tim Scott @ 3:27 am </span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'><a href="http://www.codeplex.com/MVCContrib">MvcContrib</a>.<a
href="http://lunaverse.wordpress.com/2008/11/24/mvcfluenthtml-fluent-html-interface-for-ms-mvc/">FluentHtml</a>
provides a library of HTML helper methods that use expressions with strongly
typed views to generate HTML elements. Not too long after that MS MVC beta
introduced HtmlHelper&lt;T&gt; which allows users to create extension methods
that use expressions in the same way.&nbsp;&nbsp; The benefits are
obvious.&nbsp; By trading magic strings for expressions we gain compile time
checking, better refactoring, etc.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>So this:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;background:white'><span lang=EN style='font-family:Consolas;color:black'>&lt;%=</span><span
lang=EN style='font-family:Consolas;color:blue'>this</span><span lang=EN
style='font-family:Consolas;color:black'>.TextBox(x =&gt; x.User.FirstName)%&gt;</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>Generates this:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;background:white'><span lang=EN style='font-family:Consolas;color:blue'>&lt;</span><span
lang=EN style='font-family:Consolas;color:maroon'>input</span><span lang=EN
style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>type</span><span lang=EN
style='font-family:Consolas;color:blue'>=&quot;text&quot;</span><span lang=EN
style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>name</span><span lang=EN
style='font-family:Consolas;color:blue'>=&quot;User.FirstName&quot;</span><span
lang=EN style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>id</span><span lang=EN style='font-family:
Consolas;color:blue'>=&quot;User_FirstName&quot;</span><span lang=EN
style='font-family:Consolas;color:black'> </span><span lang=EN
style='font-family:Consolas;color:red'>value</span><span lang=EN
style='font-family:Consolas;color:blue'>=&quot;Joe&quot;/&gt;</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>This is very nice, but what about all the other magic
strings in our view?&nbsp; I’m talking of course about Javascript. Does this
look familiar?</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;background:white'><span lang=EN style='font-family:Consolas;color:black'>$('#User_FirstName').change(doSomething);</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>Doh!&nbsp; We just can’t escape those magic strings. Or
can we?&nbsp; How about this?</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;background:white'><span lang=EN style='font-family:Consolas;color:black'>$('#&lt;%=</span><span
lang=EN style='font-family:Consolas;color:blue'>this</span><span lang=EN
style='font-family:Consolas;color:black'>.IdFor(x =&gt; x.User.FirstName)%&gt;').change(doSomething);</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>MsMvc.FluentHtml has introduced IdFor and NameFor. Okay,
so we won’t eliminate </span><i><span lang=EN style='font-size:9.0pt;
color:#333333'>all</span></i><span lang=EN style='font-size:9.0pt;color:#333333'>
magic string in Javascript but perhaps quite a few. Perhaps we give up a tiny
bit of readability, but I think it’s worth it to stop fretting whether some
refactor is going to break a bunch of Javascript.</span></p>

<p class=MsoNormal style='line-height:15.6pt'><span lang=EN style='font-size:
9.0pt;color:#333333'>I owe credit to <a
href="http://www.lostechies.com/blogs/jimmy_bogard/default.aspx">Jimmy Bogard</a>
for planting this idea in my mind in one of his tweets.</span></p>

<p><span lang=EN style='font-size:9.0pt;color:#333333'>&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
