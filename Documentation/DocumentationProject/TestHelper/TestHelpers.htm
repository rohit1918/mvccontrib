<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 12 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Georgia;
	panose-1:2 4 5 2 5 4 5 2 3 3;}
@font-face
	{font-family:"Lucida Grande";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:"Lucida Sans Unicode";
	panose-1:2 11 6 2 3 5 4 2 2 4;}
@font-face
	{font-family:"Segoe UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:12.0pt;
	font-family:"Verdana","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
h6
	{mso-style-link:"Heading 6 Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Cambria","serif";
	color:#243F60;
	font-weight:normal;
	font-style:italic;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
pre
	{mso-style-link:"HTML Preformatted Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p.MsoNoSpacing, li.MsoNoSpacing, div.MsoNoSpacing
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Verdana","sans-serif";}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Times New Roman","serif";
	font-weight:bold;}
span.apple-converted-space
	{mso-style-name:apple-converted-space;}
span.HTMLPreformattedChar
	{mso-style-name:"HTML Preformatted Char";
	mso-style-link:"HTML Preformatted";
	font-family:"Courier New";}
span.apple-style-span
	{mso-style-name:apple-style-span;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.keyword
	{mso-style-name:keyword;}
span.string
	{mso-style-name:string;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
p.comments, li.comments, div.comments
	{mso-style-name:comments;
	margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
span.Heading6Char
	{mso-style-name:"Heading 6 Char";
	mso-style-link:"Heading 6";
	font-family:"Cambria","serif";
	color:#243F60;
	font-style:italic;}
span.z-TopofFormChar
	{mso-style-name:"z-Top of Form Char";
	mso-style-link:"z-Top of Form";
	font-family:"Arial","sans-serif";
	display:none;}
span.z-BottomofFormChar
	{mso-style-name:"z-Bottom of Form Char";
	mso-style-link:"z-Bottom of Form";
	font-family:"Arial","sans-serif";
	display:none;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=Section1>

<h1>Test Helper</h1>

<p class=MsoNormal style='margin-bottom:12.0pt'><span class=apple-style-span><span
style='font-size:8.0pt;line-height:115%;font-family:"Segoe UI","sans-serif";
color:#30332D'>The</span></span><span class=apple-converted-space><span
style='font-size:8.0pt;line-height:115%;font-family:"Segoe UI","sans-serif";
color:#30332D'>&nbsp;</span></span><span class=apple-style-span><b><span
style='font-size:8.0pt;line-height:115%;font-family:"Segoe UI","sans-serif";
color:#30332D'>TestHelper</span></b></span><span class=apple-converted-space><span
style='font-size:8.0pt;line-height:115%;font-family:"Segoe UI","sans-serif";
color:#30332D'>&nbsp;</span></span><span class=apple-style-span><span
style='font-size:8.0pt;line-height:115%;font-family:"Segoe UI","sans-serif";
color:#30332D'>library allows simpler unit testing on MVC.Net controllers than
can be accomplished through standard mocking and subclassing. It is designed to
reduce the amount of work required to test controllers, and therefore should be
used by your test projects but not in your web server project.</span></span><span
class=apple-converted-space><span style='font-size:8.0pt;line-height:115%;
font-family:"Segoe UI","sans-serif";color:#30332D'>&nbsp;</span></span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'><a
href="http://mvccontrib.codeplex.com/Wiki/View.aspx?title=TestHelper&amp;referringTitle=Documentation#GeneralConcepts"><span
style='color:#3E62A6'>General Concepts</span></a></span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'><a
href="http://mvccontrib.codeplex.com/Wiki/View.aspx?title=TestHelper&amp;referringTitle=Documentation#Examples"><span
style='color:#3E62A6'>Examples</span></a></span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt'><span
class=apple-style-span>&nbsp;</span></p>

<h2 style='margin-bottom:1.55pt'><a name=GeneralConcepts></a><span
style='font-family:"Segoe UI","sans-serif";color:#30332D'>General Concepts</span></h2>

<p class=MsoNormal><span class=apple-style-span><span style='font-size:8.0pt;
line-height:115%;font-family:"Segoe UI","sans-serif";color:#30332D'>One of the
major advantages of the new MVC.Net framework is the ease with which it can be
tested. While this is generally true, there are a number of areas where testing
the framework becomes difficult to do. The<b>TestHelper</b></span></span><span
class=apple-converted-space><span style='font-size:8.0pt;line-height:115%;
font-family:"Segoe UI","sans-serif";color:#30332D'>&nbsp;</span></span><span
class=apple-style-span><span style='font-size:8.0pt;line-height:115%;
font-family:"Segoe UI","sans-serif";color:#30332D'>assists by providing a
Controller Factory that creates controllers with internal data members
correctly initialized. These include:</span></span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>HttpContext</span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>HttpRequest</span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>HttpResponse</span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>HttpSession</span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>Form</span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>TempData</span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>QueryString</span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>ApplicationPath</span></p>

<p class=MsoNormal style='margin-top:.05in;margin-right:0in;margin-bottom:.05in;
margin-left:.25in;text-indent:-.25in;line-height:normal;vertical-align:middle'><span
style='font-size:10.0pt;font-family:Symbol;color:#30332D'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;font-family:"Segoe UI","sans-serif";
color:#30332D'>PathInfo</span></p>

<p class=MsoNormal style='margin-bottom:12.0pt'><span style='font-size:8.0pt;
line-height:115%;font-family:"Segoe UI","sans-serif";color:#30332D'><br>
<span class=apple-style-span>It also provides a way to determine what
parameters were passed to RenderView and RedirectToAction.</span><span
class=apple-converted-space>&nbsp;</span></span></p>

<h2 style='margin-bottom:1.55pt'><a name=Examples></a><span style='font-family:
"Segoe UI","sans-serif";color:#30332D'>Examples</span></h2>

<p class=MsoNormal style='margin-bottom:12.0pt'><span class=apple-style-span><span
style='font-size:8.0pt;line-height:115%;font-family:"Segoe UI","sans-serif";
color:#30332D'>More examples can be found in the Samples directory of the MVC
Contrib project. In that directory is a project for MvcContrib.TestHelper.Sample
which contains a very simple MVC.Net project and Test. There are a number of
tests in the test project which detail how to use the Test Helper. A couple of
them are included below.</span></span></p>

<h3 style='margin-bottom:1.55pt'><span style='font-size:11.0pt;line-height:
115%;font-family:"Segoe UI","sans-serif";color:#30332D'>Testing data from
RenderView method call</span></h3>

<div style='border:solid #3E62A6 1.5pt;padding:6.0pt 6.0pt 6.0pt 6.0pt;
background:#ECECEC'><pre style='background:#ECECEC;border:none;padding:0in;
overflow-x: auto;overflow-y: hidden'><span style='font-size:8.0pt;color:#30332D'>        [Test]</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        public void ListControllerSelectsListView()</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        {</span></pre><pre style='background:#ECECEC;border:
none;padding:0in'><span style='font-size:8.0pt;color:#30332D'>            ActionResult result = controller.List();</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>            result.AssertRenderedView().ForView(&quot;List&quot;);</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        }</span></pre></div>

<p class=MsoNormal style='margin-bottom:12.0pt'><span class=apple-style-span><span
style='font-size:8.0pt;line-height:115%'>&nbsp;</span></span></p>

<h3 style='margin-bottom:1.55pt'><span style='font-size:11.0pt;line-height:
115%;font-family:"Segoe UI","sans-serif";color:#30332D'>Testing data from
RedirectToAction method call</span></h3>

<div style='border:solid #3E62A6 1.5pt;padding:6.0pt 6.0pt 6.0pt 6.0pt;
background:#ECECEC'><pre style='background:#ECECEC;border:none;padding:0in;
overflow-x: auto;overflow-y: hidden'><span style='font-size:8.0pt;color:#30332D'>        [Test]</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        public void AddFormStarShouldRedirectToList()</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        {</span></pre><pre style='background:#ECECEC;border:
none;padding:0in'><span style='font-size:8.0pt;color:#30332D'>            StarsController controller = new StarsController();</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>            ActionResult result = controller.AddFormStar();</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>            result.AssertActionRedirect().ToAction(&quot;List&quot;);</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        }</span></pre></div>

<p class=MsoNormal style='margin-bottom:12.0pt'><span class=apple-style-span><span
style='font-size:8.0pt;line-height:115%'>&nbsp;</span></span></p>

<h3 style='margin-bottom:1.55pt'><span style='font-size:11.0pt;line-height:
115%;font-family:"Segoe UI","sans-serif";color:#30332D'>Testing data from Form
and Session variables</span></h3>

<div style='border:solid #3E62A6 1.5pt;padding:6.0pt 6.0pt 6.0pt 6.0pt;
background:#ECECEC'><pre style='background:#ECECEC;border:none;padding:0in;
overflow-x: auto;overflow-y: hidden'><span style='font-size:8.0pt;color:#30332D'>        [Test]</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        public void AddSessionStarShouldSaveFormToSession()</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        {</span></pre><pre style='background:#ECECEC;border:
none;padding:0in'><span style='font-size:8.0pt;color:#30332D'>            TestControllerBuilder builder = new TestControllerBuilder();</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>            StarsController controller = new StarsController();</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>            builder.InitializeController(controller);</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'> </span></pre><pre style='background:#ECECEC;border:none;
padding:0in'><span style='font-size:8.0pt;color:#30332D'>//note that this is assigned before the controller action. This simulates the server filling out the form data from the request</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>            builder.Form[&quot;NewStarName&quot;] = &quot;alpha c&quot;;</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'> </span></pre><pre style='background:#ECECEC;border:none;
padding:0in'><span style='font-size:8.0pt;color:#30332D'> </span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>//this assumes that AddSessionStar takes the form data and adds it to the session</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>            controller.AddSessionStar();</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'> </span></pre><pre style='background:#ECECEC;border:none;
padding:0in'><span style='font-size:8.0pt;color:#30332D'>            Assert.AreEqual(&quot;alpha c&quot;, controller.HttpContext.Session[&quot;NewStarName&quot;]);</span></pre><pre
style='background:#ECECEC;border:none;padding:0in'><span style='font-size:8.0pt;
color:#30332D'>        }</span></pre></div>

<p class=MsoNormal><span class=apple-style-span><span style='font-size:11.0pt;
line-height:115%;font-family:"Georgia","serif";color:#555555'>&nbsp;</span></span></span></p>

<p class=MsoNormal><span class=apple-style-span><span style='font-size:11.0pt;
line-height:115%;font-family:"Georgia","serif";color:#555555'>&nbsp;</span></span></p>

<span class=apple-style-span><span style='font-size:11.0pt;line-height:115%;
font-family:"Georgia","serif";color:#555555'><br clear=all style='page-break-before:
always'>
</span></span>

<p class=MsoNormal><span class=apple-style-span><span style='font-size:11.0pt;
line-height:115%;font-family:"Georgia","serif";color:#555555'>&nbsp;</span></span></p>

<h1><span class=apple-style-span><span style='line-height:115%'>Fluent Route
Testing in ASP.NET MVC</span></span></h1>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif"'>Have you written
code like this recently?</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>[Test]</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>public&nbsp;void&nbsp;tedious_route_test()</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>{</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;Global.RegisterRoutes(RouteTable.Routes);</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;httpContext&nbsp;=&nbsp;MockRepository.GenerateStub&lt;HttpContextBase&gt;();</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;httpContext.Stub(x&nbsp;=&gt;x.Request).Return(MockRepository.GenerateStub&lt;HttpRequestBase&gt;());</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;httpContext.Request.Stub(x&nbsp;=&gt;&nbsp;x.PathInfo).Return(<b>&quot;&quot;</b>);</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;httpContext.Request.Stub(x&nbsp;=&gt;x.AppRelativeCurrentExecutionFilePath).Return(<b>&quot;~/foo/bar&quot;</b>);</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;routeData&nbsp;=&nbsp;RouteTable.Routes.GetRouteData(httpContext);</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.That(routeData.Values[<b>&quot;controller&quot;</b>],&nbsp;Is.EqualTo(<b>&quot;foo&quot;</b>));</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;Assert.That(routeData.Values[<b>&quot;action&quot;</b>],&nbsp;Is.EqualTo(<b>&quot;bar&quot;</b>));</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Consolas'>}</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>This
mess of nastiness is what is required to test your routes in ASP.NET MVC.&nbsp;
There are a number of things wrong with this.&nbsp; First and foremost, we're
doing magical-mocking here.&nbsp; That is - we somehow know exactly the two
properties we need to mock for this to work.&nbsp; It turns out this isn't such
a magical process as it is looking at reflector and a lot of trial and
error.&nbsp; The next thing wrong that I see is that our route values (and
keys) are case-insensitive, so we'd need to include some more flexibility in
our Asserts here.</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>Who
wants to deal with that mess?&nbsp; I sure don't.&nbsp; Last night, my pal
&amp; co-author&nbsp;</span><a
href="http://www.lostechies.com/blogs/jimmy_bogard" target="_blank"><b><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#21759B'>Jimmy
Bogard</span></b></a><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#555555'>&nbsp;banged together a fluent API for testing routes without
needing all of this crap.</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>Here
is a test to verify our root route is working properly:</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><b><span
style='font-size:11.0pt;font-family:Consolas'>&quot;~/&quot;</span></b><span
style='font-size:11.0pt;font-family:Consolas'>.Route().ShouldMapTo&lt;FooController&gt;();</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>And
a more complex case where we have an action parameter:</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><b><span
style='font-size:11.0pt;font-family:Consolas'>&quot;~/foo/bar/widget&quot;</span></b><span
style='font-size:11.0pt;font-family:Consolas'>.Route().ShouldMapTo&lt;FooController&gt;(x&nbsp;=&gt;&nbsp;x.Bar(<b>&quot;widget&quot;</b>));</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>These
are a lot nicer, as we are dealing with no unnecessary string here, the
controller are now strongly-typed (we get intellisense and refactoring
support), and we can easily test routes with a single line.</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>This
does have a couple caveats though:&nbsp; it assumes</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;line-height:16.5pt'><span
style='font-size:10.0pt;font-family:Wingdings;color:#555555'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>you're
using NUnit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;line-height:16.5pt'><span
style='font-size:10.0pt;font-family:Wingdings;color:#555555'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>you're
using RhinoMocks</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;line-height:16.5pt'><span
style='font-size:10.0pt;font-family:Wingdings;color:#555555'>§<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>you
add your routes to the RouteTable.Routes collection</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>So
how did we do this?&nbsp; I have to admit, I tried to get this to work on the
bus ride to work, but without an internet connection I was dead in the water.&nbsp;
Jimmy helped me grasp the way that Expression&lt;T&gt; works.&nbsp; His wise
words were: &quot;Here's where you just set a breakpoint and fire up the
debugger and look.&quot;&nbsp; He's right - the API there is quite
opaque.&nbsp; But once I got it to&nbsp; work it made a lot of sense.&nbsp;
Expression&lt;T&gt; is awesome!</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>Here's
the method with most of the goods:</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>public&nbsp;static&nbsp;RouteData&nbsp;ShouldMapTo&lt;TController&gt;(this&nbsp;RouteData&nbsp;routeData,Expression&lt;Func&lt;<b>TController,&nbsp;ActionResult&gt;&gt;&nbsp;action)</b></span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><b><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;where&nbsp;TController&nbsp;:&nbsp;Controller</span></b></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><b><span
style='font-size:11.0pt;font-family:Consolas'>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></b></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><b><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;Assert.That(routeData,&nbsp;Is.Not.Null,&nbsp;&quot;The
URL did not match any route&quot;);&nbsp;</span></b></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;<b>//check
controller</b></span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;routeData.ShouldMapTo&lt;TController&gt;();</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;<b>//check
action</b></span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;methodCall&nbsp;=&nbsp;(MethodCallExpression)&nbsp;action.Body;</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;actualAction&nbsp;=&nbsp;routeData.Values.GetValue(<b>&quot;action&quot;</b>).ToString();</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;expectedAction&nbsp;=&nbsp;methodCall.Method.Name;</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;actualAction.AssertSameStringAs(expectedAction);</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;<b>//check
parameters</b></span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;methodCall.Arguments.Count;&nbsp;i++)</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;name&nbsp;=&nbsp;methodCall.Method.GetParameters()[i].Name;</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;value&nbsp;=&nbsp;((ConstantExpression)&nbsp;methodCall.Arguments[i]).Value;</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.That(routeData.Values.GetValue(name),Is.EqualTo(value.ToString()));</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;routeData;</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:Consolas'>}</span></p>

<p class=MsoNormal style='margin-bottom:16.5pt;line-height:16.5pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#555555'>This
might be a tad brittle, but in my preliminary testing it worked wonders.&nbsp;
This code is now in&nbsp;<a href="http://mvccontrib.org" target="_blank"><b><span
style='color:#21759B'>MvcContrib</span></b></a>'s TestHelper project.&nbsp;</span></p>

<span style='font-size:11.0pt;line-height:115%;font-family:"Verdana","sans-serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal><span style='font-size:11.0pt;line-height:115%'>&nbsp;</span></p>

<h1>TestControllerBuilder in MvcContrib</h1>

<p class=MsoNormal style='text-align:justify;line-height:normal;vertical-align:
baseline'><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>Yesterday, I cracked open the&nbsp;<a
href="http://mvccontrib.org" target="_blank"><span style='color:#4B6CCD'>MvcContrib</span></a>&nbsp;source
code to see if it had....ummm...ok, I swear I was looking for something
legitimate in there. But as soon as I updated the latest and opened the
project, my eyes zeroed in on the TestControllerHelper class. So with a quick
mutter of &quot;oooh, shiny&quot; to myself, I proceeded to what I knew would
be the dearth of my productivity for the rest of my day.</span></p>

<p class=MsoNormal style='text-align:justify;line-height:normal;vertical-align:
baseline'><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>Sitting here this morning, I can report to you that I am now one
step closer to being able to adequately (but still not quite usefully) test
controller actions that include a RedirectToAction method. Here's a sample
test:</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-align:
justify;line-height:normal;vertical-align:baseline'><span style='font-size:
11.0pt;font-family:"Courier New";color:#555555'>[ Test ]</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-align:
justify;line-height:normal;vertical-align:baseline'><span style='font-size:
11.0pt;font-family:"Courier New";color:#555555'>public void Test_redirect( )</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-align:
justify;line-height:normal;vertical-align:baseline'><span style='font-size:
11.0pt;font-family:"Courier New";color:#555555'>{</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-align:
justify;line-height:normal;vertical-align:baseline'><span style='font-size:
11.0pt;font-family:"Courier New";color:#555555'>  TestControllerBuilder builder
= new TestControllerBuilder( );</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-align:
justify;line-height:normal;vertical-align:baseline'><span style='font-size:
11.0pt;font-family:"Courier New";color:#555555'>  var controller =
builder.CreateController&lt;LocationController&gt;( );</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-align:
justify;line-height:normal;vertical-align:baseline'><span style='font-size:
11.0pt;font-family:"Courier New";color:#555555'>  controller.TestRedirect( );</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-align:
justify;line-height:normal;vertical-align:baseline'><span style='font-size:
11.0pt;font-family:"Courier New";color:#555555'>  Assert.That(
builder.RedirectToActionData.ControllerName, Is.EqualTo( &quot;Job&quot; ) );</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-align:
justify;line-height:normal;vertical-align:baseline'><span style='font-size:
11.0pt;font-family:"Courier New";color:#555555'>}</span></p>

<p class=MsoNormal style='text-align:justify;line-height:normal;vertical-align:
baseline'><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>The&nbsp;</span><span style='font-size:11.0pt;font-family:"Courier New";
color:#555555'>CreateController</span><span style='font-size:11.0pt;font-family:
"Georgia","serif";color:#555555'>&nbsp;method on my&nbsp;</span><span
style='font-size:11.0pt;font-family:"Courier New";color:#555555'>TestControllerBuilder</span><span
style='font-size:11.0pt;font-family:"Georgia","serif";color:#555555'>&nbsp;uses
Castle's&nbsp;<a href="http://www.castleproject.org/dynamicproxy/index.html"
target="_blank"><span style='color:#4B6CCD'>DynamicProxy</span></a>to create
the controller. It also creates a&nbsp;</span><span style='font-size:11.0pt;
font-family:"Courier New";color:#555555'>ControllerContext</span><span
style='font-size:11.0pt;font-family:"Georgia","serif";color:#555555'>&nbsp;using
dynamic mocks from&nbsp;</span><a
href="http://www.ayende.com/projects/rhino-mocks.aspx" target="_blank"><span
style='font-size:11.0pt;font-family:"Georgia","serif";color:#4B6CCD'>Rhino
Mocks</span></a><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>&nbsp;similar to the way Haackselman have&nbsp;</span><a
href="http://haacked.com/archive/2007/11/05/rhino-mocks-extension-methods-mvc-crazy-delicious.aspx"
target="_blank"><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#4B6CCD'>already</span></a><span style='font-size:11.0pt;font-family:
"Georgia","serif";color:#555555'>&nbsp;</span><a
href="http://www.hanselman.com/blog/ASPNETMVCSessionAtMix08TDDAndMvcMockHelpers.aspx"
target="_blank"><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#4B6CCD'>showed</span></a><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>&nbsp;you and wires it up to the controller.</span></p>

<p class=MsoNormal style='text-align:justify;line-height:normal;vertical-align:
baseline'><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>An interceptor is also attached to the controller to intercept
calls to&nbsp;</span><span style='font-size:11.0pt;font-family:"Courier New";
color:#555555'>RenderView</span><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>&nbsp;and</span><span style='font-size:11.0pt;font-family:"Courier New";
color:#555555'>RedirectToAction</span><span style='font-size:11.0pt;font-family:
"Georgia","serif";color:#555555'>. (Actually, it intercepts all calls but only
these two have special handling.) Calls to either method will populate an
appropriate object on the builder class. In the example above, I'm using the&nbsp;</span><span
style='font-size:11.0pt;font-family:"Courier New";color:#555555'>RedirectToActionData</span><span
style='font-size:11.0pt;font-family:"Georgia","serif";color:#555555'>&nbsp;object.</span></p>

<p class=MsoNormal style='text-align:justify;line-height:normal;vertical-align:
baseline'><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>So far, this is all sweet and dandy like raccoon candy. I have
indeed verified that it works as advertised. But at present, it seems to work
only for controllers that have a parameterless constructor. Which is going to
work for exactly none of my controllers.</span></p>

<p class=MsoNormal style='text-align:justify;line-height:normal;vertical-align:
baseline'><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>I have a version working that allows you to pass in constructor
arguments to&nbsp;</span><span style='font-size:11.0pt;font-family:"Courier New";
color:#555555'>CreateController</span><span style='font-size:11.0pt;font-family:
"Georgia","serif";color:#555555'>and will submit it as a patch for MvcContrib,
assuming it hasn't already been addressed.</span></p>

<p class=MsoNormal style='text-align:justify;line-height:normal;vertical-align:
baseline'><span style='font-size:11.0pt;font-family:"Georgia","serif";
color:#555555'>Oh yeah, I remember! I wanted to see if MvcContrib had the Flash
feature I saw added to (but not yet used in) CodeCampServer.</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;line-height:115%'>&nbsp;</span></p>

<b><span style='font-size:11.0pt;line-height:115%;font-family:"Tahoma","sans-serif";
color:#555533'><br clear=all style='page-break-before:always'>
</span></b>

<p class=MsoNormal><span style='font-size:11.0pt;line-height:115%;font-family:
"Tahoma","sans-serif";color:#555533'>&nbsp;</span></p>

<h1 style='margin-top:0in'><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;font-family:"Tahoma","sans-serif";
color:#666644;font-weight:normal'>Using MvcContrib's TestControllerBuilder to
Test Your ASP.NET MVC Controllers</span></a></h1>

<p class=MsoNormal><span style='font-size:11.0pt;line-height:115%;font-family:
"Tahoma","sans-serif";color:#666644'>April 14, 2008 06:40 by<span
class=apple-converted-space>&nbsp;</span><a
href="http://www.shanebauer.com/blog/author/sbauer.aspx"><span
style='color:#004488'>sbauer</span></a></span></p>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>One benefit of
ASP.NET MVC (or any MVC framework) is the ability to test your code without
having to start up a web server. Sure, you could have always unit tested your
model layer, but what if you wanted to ensure that your web application code
was interacting correctly with your domain?</span></p>

<h4 style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Tahoma","sans-serif";color:#444444'>A Quick Scenario<span
class=apple-converted-space>&nbsp;</span></span></h4>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>Lets say, for
example, you have an Article controller. The controller has an action called
&quot;view&quot;. This action accepts one parameter, an integer, representing
the article ID. The action code would then take the ID, and query the database
for the article record. What happens if it doesn't find a record? Obviously,
you could do any number of things. You could redirect them to a not found
action or just display a different view. To keep things simple in this example,
we'll just redirect the user to the main article page.</span></p>

<p style='margin:0in;margin-bottom:.0001pt'><strong><span style='font-size:
11.0pt;font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>Controllers
are Test-Friendly, kind of</span></strong></p>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>As I said above,
a benefit of the MVC framework is the ability to test your code without having
to bother with ugly hacks to manipulate a web server and/or the ASP.NET
pipeline. The ASP.NET MVC is an improvement in this area without a doubt.
However, it's not perfect. There are areas in which you cannot test easily.
RedirectData, for example, is one example of something that's difficult to
test. There are ways to work around this limitation, but they are exactly that:
a work-around. Fortunately, the MVC team has recognized a few areas that could
be improved and are actively addressing our concerns for the next
preview.&nbsp;</span></p>

<p style='margin:0in;margin-bottom:.0001pt'><strong><span style='font-size:
11.0pt;font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>Introducing
the TestControllerBuilder</span></strong></p>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>The<span
class=apple-converted-space>&nbsp;</span><a href="http://www.mvccontrib.org"
target="_blank"><span style='color:#004488'>MvcContrib</span></a><span
class=apple-converted-space>&nbsp;</span>project is an open source project that
boasts quite a few additional features you can add to your project. For
example, MvcContrib offers a variety of controller factories that integrate
will all of the major IoC containers. In addition, MvcContrib also has a
collection of view engines you can use if you're not satisfied with the
WebForms view engine that's enabled by default.</span></p>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>The
TestControllerBuilder is another contribution that's also available in this
project. TestControllerBuilder uses a dynamic proxy and an interceptor to
relieve some of the pain behind controller testing. Below is a sample test
using the TestControllerBuilder, Rhino Mocks and MbUnit. In order for this to
work, I need to make sure my mock instance of IArticleService returns a null instance.
I'm using Rhino Mocks &quot;SetupResult&quot; for this.</span></p>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>&nbsp;</span></p>

<p class=MsoNormal style='background:#F8F8F8'><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;color:#A0A0A0'>view plain</span></a><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;color:#A0A0A0'>copy to clipboard</span></a><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;color:#A0A0A0'>print</span></a><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;color:#A0A0A0'>?</span></a></p>

<div style='border:none;border-left:solid #6CE26C 2.25pt;padding:0in 0in 0in 0in;
background:white;margin-left:.25in;margin-right:0in'>

<ol start=1 type=1>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>[Test]&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:#F8F8F8;
     border:none;padding:0in'><span class=keyword><b><span style='font-size:
     11.0pt;font-family:Consolas;color:#006699'>public</span></b></span><span
     style='font-size:11.0pt;font-family:Consolas;color:black'>&nbsp;</span><span
     class=keyword><b><span style='font-size:11.0pt;font-family:Consolas;
     color:#006699'>void</span></b></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>&nbsp;Unknown_Article_Redirects_To_Index()&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>{&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:#F8F8F8;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>TestControllerBuilder&nbsp;builder&nbsp;=&nbsp;</span><span
     class=keyword><b><span style='font-size:11.0pt;font-family:Consolas;
     color:#006699'>new</span></b></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>&nbsp;TestControllerBuilder();&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>ArticleController&nbsp;controller&nbsp;=&nbsp;builder.CreateController&lt;ArticleController&gt;(</span><span
     class=keyword><b><span style='font-size:11.0pt;font-family:Consolas;
     color:#006699'>new</span></b></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>&nbsp;</span><span class=keyword><b><span
     style='font-size:11.0pt;font-family:Consolas;color:#006699'>object</span></b></span><span
     style='font-size:11.0pt;font-family:Consolas;color:black'>[]&nbsp;{&nbsp;articleService&nbsp;});&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:#F8F8F8;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>SetupResult.For(articleService.GetArticle(1)).IgnoreArguments().Return(</span><span
     class=keyword><b><span style='font-size:11.0pt;font-family:Consolas;
     color:#006699'>null</span></b></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>);&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>controller.View(1);&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:#F8F8F8;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>Assert.AreEqual(builder.RedirectToActionData.ActionName,&nbsp;</span><span
     class=string><span style='font-size:11.0pt;font-family:Consolas;
     color:blue'>&quot;index&quot;</span></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>);&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>}&nbsp;&nbsp;</span></li>
</ol>

</div>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>&nbsp;</span></p>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>Now, here's the
action implementation.</span></p>

<p class=MsoNormal style='background:#F8F8F8'><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;color:#A0A0A0'>view plain</span></a><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;color:#A0A0A0'>copy to clipboard</span></a><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;color:#A0A0A0'>print</span></a><a
href="http://www.shanebauer.com/blog/post/2008/04/Using-MvcContribs-TestControllerBuilder-to-Test-Your-ASPNET-MVC-Controllers.aspx"><span
style='font-size:11.0pt;line-height:115%;color:#A0A0A0'>?</span></a></p>

<div style='border:none;border-left:solid #6CE26C 2.25pt;padding:0in 0in 0in 0in;
background:white;margin-left:.25in;margin-right:0in'>

<ol start=1 type=1>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span class=keyword><b><span style='font-size:
     11.0pt;font-family:Consolas;color:#006699'>public</span></b></span><span
     style='font-size:11.0pt;font-family:Consolas;color:black'>&nbsp;</span><span
     class=keyword><b><span style='font-size:11.0pt;font-family:Consolas;
     color:#006699'>void</span></b></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>&nbsp;View(</span><span class=keyword><b><span
     style='font-size:11.0pt;font-family:Consolas;color:#006699'>int</span></b></span><span
     style='font-size:11.0pt;font-family:Consolas;color:black'>&nbsp;id)&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:#F8F8F8;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>{&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>&nbsp;&nbsp;&nbsp;&nbsp;Article&nbsp;article&nbsp;=&nbsp;articleService.GetArticle(id);&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:#F8F8F8;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=keyword><b><span
     style='font-size:11.0pt;font-family:Consolas;color:#006699'>if</span></b></span><span
     style='font-size:11.0pt;font-family:Consolas;color:black'>&nbsp;(article&nbsp;==&nbsp;</span><span
     class=keyword><b><span style='font-size:11.0pt;font-family:Consolas;
     color:#006699'>null</span></b></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>)&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RedirectToAction(</span><span
     class=string><span style='font-size:11.0pt;font-family:Consolas;
     color:blue'>&quot;index&quot;</span></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>);&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:#F8F8F8;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>&nbsp;&nbsp;&nbsp;&nbsp;ArticleControllerViewData&nbsp;viewData&nbsp;=&nbsp;</span><span
     class=keyword><b><span style='font-size:11.0pt;font-family:Consolas;
     color:#006699'>new</span></b></span><span style='font-size:11.0pt;
     font-family:Consolas;color:black'>&nbsp;ArticleControllerViewData&nbsp;{Article&nbsp;=&nbsp;article};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:white;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>&nbsp;&nbsp;&nbsp;&nbsp;RenderView(</span><span class=string><span
     style='font-size:11.0pt;font-family:Consolas;color:blue'>&quot;view&quot;</span></span><span
     style='font-size:11.0pt;font-family:Consolas;color:black'>,&nbsp;viewData);&nbsp;&nbsp;</span></li>
 <li class=MsoNormal style='color:#5C5C5C;margin-left:.25in;background:#F8F8F8;
     border:none;padding:0in'><span style='font-size:11.0pt;font-family:Consolas;
     color:black'>}&nbsp;&nbsp;</span></li>
</ol>

</div>

<p class=MsoNormal style='line-height:normal'><span style='font-size:11.0pt;
font-family:"Tahoma","sans-serif";color:#444444'>&nbsp;</span></p>

<p style='margin:0in;margin-bottom:.0001pt'><strong><span style='font-size:
11.0pt;font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>Changes
are Coming</span></strong></p>

<p style='margin:0in;margin-bottom:.0001pt'><span style='font-size:11.0pt;
font-family:"Lucida Sans Unicode","sans-serif";color:#444444'>As I mentioned
above, changes are coming. I'm not sure how long this code will be appropriate
(hopefully not long). Either way, I thought it was worth mentioning.&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;line-height:115%'>&nbsp;</span></p>

<span style='font-size:11.0pt;line-height:115%;font-family:"Lucida Grande","serif";
color:#222222'><br clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal><b><span style='font-size:11.0pt;line-height:115%;
font-family:"Lucida Grande","serif";color:#222222'>&nbsp;</span></b></p>

<h1><a
href="http://russelleast.wordpress.com/2009/01/20/tddbdd-with-aspnet-mvc/"><span
style='line-height:115%;color:#365F91;text-decoration:none'>TDD/BDD with
ASP.NET&nbsp;MVC</span></a></h1>

<div style='border:none;border-bottom:solid #BBBBBB 1.0pt;padding:0in 0in 0in 0in'>

<p class=comments style='margin:0in;margin-bottom:.0001pt;border:none;
padding:0in'><a
href="http://russelleast.wordpress.com/2009/01/20/tddbdd-with-aspnet-mvc/#comments"><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#333333;
background:white'>with 3 comments</span></a></p>

</div>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>I have recently been going hammer and tongs with ASP.NET MVC.
One of the selling points for ASP.NET MVC is its testability, so while I have
been learning this technology, I have found a couple of annoyances.</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>When you create a new ASP.NET MVC project, the wizard in VS2008
asks you if you want to create a test project. If you do create the test
project, you get a couple of pre made tests that really dont portray good TDD
and because you only get a couple of tests, you have low code coverage and have
untested code. I have had to back peddle&nbsp; tests for the existing code.</span></p>

<p style='margin:0in;margin-bottom:.0001pt;line-height:11.25pt'><span
style='font-size:11.0pt;font-family:"Lucida Grande","serif";color:#222222'>For
doing any development with ASP.NET MVC, the<span class=apple-converted-space>&nbsp;</span><a
href="http://www.codeplex.com/MVCContrib" target="_blank"><span
style='color:#004477'>MvcContrib</span></a><span class=apple-converted-space>&nbsp;</span>project
is an absolute must. The MvcContrib project contains general features that
really improve your development, Dependency Injection, type safety, a Grid and
much more. I found that the MvcContrib examples, are so straight forward that
in 60 seconds of eyeballing the code I could understand it fully.</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>Keeping to the subject, MvcContrib provides a library that really
help when it comes to testing. I have been developing with MonoRail fairly
solidly for the last 6 months or so and their are similarities between the
Castle test classes and the Library from MvcContrib.</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>To make things more real world:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.15pt;
margin-left:18.8pt;text-indent:-.25in;line-height:11.25pt'><span
style='font-size:10.0pt;font-family:Symbol;color:#222222'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>My project is using Unity for its IoC container and I am
injecting dependancies into my controllers (again the MvcContrib provides
libraries that make this easy to implement).&nbsp;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.15pt;
margin-left:18.8pt;text-indent:-.25in;line-height:11.25pt'><span
style='font-size:10.0pt;font-family:Symbol;color:#222222'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>For writing my tests/specs, I am using NBehave, NUnit and
RhinoMocks 3.5.&nbsp;</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>I started rewriting the tests for the HomeController because is
was the easiest. The tests check that the controller displays the right view.</span></p>

<pre><span style='font-size:11.0pt;color:#222222'>using System.Web.Mvc;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using RussellEast.Mvc.Controllers;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using MvcContrib.TestHelper;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using NBehave.Narrator.Framework;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using NBehave.Spec.NUnit;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using NUnit.Framework;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using Specification = NUnit.Framework.TestAttribute;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>namespace RussellEast.Mvc.Tests.Controllers.Home</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>{</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    [TestFixture]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    public class When_displaying_home_pages : SpecBase</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private HomeController controller;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private Story story;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private TestControllerBuilder builder;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        [Story]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        public override void MainSetup()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            base.MainSetup();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            story = new Story(&quot;Home page&quot;);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            story.AsA(&quot;user&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .IWant(&quot;to go to the home page&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .SoThat(&quot;i can start using the application&quot;);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            PrepareController();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private void PrepareController()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            builder = new TestControllerBuilder();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            controller = builder.CreateController();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        [Specification]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        public void Index()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            ActionResult result = null;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            story.WithScenario(&quot;home index page&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .Given(&quot;the controller has been prepared&quot;, () =&gt; controller.ShouldNotBeNull())</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .When(&quot;the user navigates to the index view&quot;, () =&gt; result = controller.Index())</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .Then(&quot;verify that the result is correct&quot;, () =&gt; result.AssertViewRendered().ForView(&quot;Index&quot;));</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        [Specification]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        public void About()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            ActionResult result = null;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            story.WithScenario(&quot;about page&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .Given(&quot;the controller has been prepared&quot;, () =&gt; controller.ShouldNotBeNull())</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .When(&quot;the user navigates to the about view&quot;, () =&gt; result = controller.About())</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .Then(&quot;verify that the result is correct&quot;, () =&gt; result.AssertViewRendered().ForView(&quot;About&quot;));</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>}</span></pre>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>The controller code is:</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>&nbsp;</span></p>

<pre><span style='font-size:11.0pt;color:#222222'>    public class HomeController : Controller</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        [Authorize, DefaultAction]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        public ActionResult Index()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            ViewData[&quot;Title&quot;] = &quot;Home Page&quot;;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            ViewData[&quot;Message&quot;] = &quot;Sample text being displayed&quot;;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            return View(&quot;Index&quot;);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        public ActionResult About()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            ViewData[&quot;Title&quot;] = &quot;About Page&quot;;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            return View(&quot;About&quot;);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    }</span></pre>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>Note: to order for the above tests to pass, you need to supply
the name of the view to render.</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>The tests above cover the behaviours for the HomeController
which are very basic, so to raise the bar. The ASP.NET MVC project template
comes with an AccountController that works with a membership provider and Forms
Authentication. The controller has a constructor that accepts two parameters.
Because the System under test is the Account Controller i am going to stub
the dependencies and write tests for the Login and&nbsp; Logout actions.</span></p>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>&nbsp;</span></p>

<pre><span style='font-size:11.0pt;color:#222222'>using System.Web.Mvc;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using System.Web.Security;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using RussellEast.Mvc.Controllers;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using MvcContrib.TestHelper;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using NBehave.Narrator.Framework;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using NBehave.Spec.NUnit;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using NUnit.Framework;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using Rhino.Mocks;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>using Specification = NUnit.Framework.TestAttribute;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>namespace EWS.Steeple.Tests.Controllers.Authentication</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>{</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    [TestFixture]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    public class When_authenticating : SpecBase</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private AccountController controller;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private IFormsAuthentication formsAuthentication;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private MembershipProvider membershipProvider;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private Story story;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>       [Story]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        public override void MainSetup()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            base.MainSetup();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            story = new Story(&quot;Authenticating&quot;);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            story.AsA(&quot;known user to the system&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .IWant(&quot;to be authenticated&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .SoThat(&quot;i can use the system&quot;);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            PrepareController();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        private void PrepareController()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            TestControllerBuilder builder = new TestControllerBuilder();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            formsAuthentication = MockRepository.GenerateStub();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            membershipProvider = MockRepository.GenerateStub();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            controller = builder.CreateController(new object[] {formsAuthentication, membershipProvider});</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        [Specification]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        public void Should_log_in_with_user_name_and_password_while_not_caching_details()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            string username = string.Empty;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            string password = string.Empty;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            bool rememberMe = false;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            ActionResult result = null;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            story.WithScenario(&quot;log in with validate details&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .Given(&quot;a controller instance&quot;, ()=&gt; controller.ShouldNotBeNull())</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .And(&quot;a user name&quot;, () =&gt; username = &quot;Username&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .And(&quot;a password&quot;, () =&gt; password = &quot;password&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .When(&quot;i attempt to log in&quot;, () =&gt;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    membershipProvider.Expect(x =&gt; x.ValidateUser(username, password)).Return(true);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    formsAuthentication.Expect(x =&gt; x.SetAuthCookie(username, rememberMe));</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    result = controller.Login(username, password, rememberMe, string.Empty);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                })</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .Then(&quot;redirect user to the home page&quot;, () =&gt;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    result.AssertActionRedirect().ToAction(x =&gt; x.Index());</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    formsAuthentication.VerifyAllExpectations();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    membershipProvider.VerifyAllExpectations();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                });</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        [Specification]</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        public void Should_sign_out_and_return_to_login_when_logging_out()</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            ActionResult result = null;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>            story.WithScenario(&quot;log out and return to login view&quot;)</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .Given(&quot;a controller instance&quot;, () =&gt; controller.ShouldNotBeNull())</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .When(&quot;i log out&quot;, () =&gt;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    formsAuthentication.Expect(x =&gt; x.SignOut());</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    result = controller.Logout();</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                })</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                .Then(&quot;i expect to be sent to the login view&quot;, () =&gt;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                {</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    result.AssertActionRedirect().ToAction(&quot;Login&quot;);</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>&nbsp;</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                    formsAuthentication.AssertWasCalled(x =&gt; x.SignOut());</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>                });</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>        }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>    }</span></pre><pre><span
style='font-size:11.0pt;color:#222222'>}</span></pre>

<p style='margin-top:0in;margin-right:0in;margin-bottom:9.4pt;margin-left:0in;
line-height:11.25pt'><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>Some points to be aware of.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.15pt;
margin-left:18.8pt;text-indent:-.25in;line-height:11.25pt'><span
style='font-size:10.0pt;font-family:Symbol;color:#222222'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>I have used two different ways to test the ActionResult was a
redirect. The first and my preferred way is using the generic controller type
and the lambda expression. I have been forced to use the string argument
approach due to the fact that the Login action is overloaded. It complained
when trying to use a lambda approach.;-(.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.15pt;
margin-left:18.8pt;text-indent:-.25in;line-height:11.25pt'><span
style='font-size:10.0pt;font-family:Symbol;color:#222222'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>MvcContrib test library provides a TestControllerBuilder that
not only creates that instance of the controller, but mocks out the
HttpContext, Sessions and form data. The docs for MvcContrib explains all. I
have used this in my PrepareController method.&nbsp;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.15pt;
margin-left:18.8pt;text-indent:-.25in;line-height:11.25pt'><span
style='font-size:10.0pt;font-family:Symbol;color:#222222'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:11.0pt;font-family:"Lucida Grande","serif";
color:#222222'>The default code in the AccountController has not been changed
to suit these tests.</span></p>

<span style='font-size:11.0pt;line-height:115%;font-family:"Verdana","sans-serif"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal><span style='font-size:11.0pt;line-height:115%'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;line-height:115%'>Credits:</span></p>

<p class=MsoNormal><span class=apple-style-span><span style='font-size:11.0pt;
line-height:115%;letter-spacing:-.65pt'>Russell East </span></span><span
style='font-size:11.0pt;line-height:115%'>http://russelleast.wordpress.com/</span></p>

<p class=MsoNormal><span class=apple-style-span><span style='font-size:11.0pt;
line-height:115%'>Shane Bauer</span></span><span style='font-size:11.0pt;
line-height:115%'> http://www.shanebauer.com/blog/</span></p>

<p class=MsoNormal><span class=apple-style-span><span style='font-size:11.0pt;
line-height:115%'>Ben Scheirman http://flux88.com/blog/</span></span></p>

<p class=MsoNormal><span class=apple-style-span><span style='font-size:11.0pt;
line-height:115%'>Kyle Baley</span></span><span style='font-size:11.0pt;
line-height:115%'>  </span><span style='font-size:11.0pt;line-height:115%;
position:relative;top:3.0pt'>http://baley.codebetter.com/</span></p>

<p class=MsoNormal><span style='font-size:11.0pt;line-height:115%'>&nbsp;</span></p>

</div>

</body>

</html>
